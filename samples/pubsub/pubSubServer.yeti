/*
 * Copyright 2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
module pubSubServer;

load yvertx;
net = load yvertx.net;
rb = load yvertx.recordparser;

import org.vertx.java.core.Vertx;
import org.vertx.java.core.buffer.Buffer;
import org.vertx.java.core.net.NetSocket;
import org.vertx.java.core.parsetools.RecordParser;
import org.vertx.java.deploy.Verticle;

import java.util.Set;

verticle do {vertx, container}:
    (vertx |> net.createServerWithHandler do socket:
        socket |> net.dataHandler (rb.delimited "\n" do frame:
            line = strTrim (string frame);
            println "Line is \(line)";
            case list (strSplit '\\' line) of
            "subscribe" :: topic :: _ : 
                (println "Topic is \(topic)";
                 _ = (vertx |> sharedData)#getSet(topic)
                    #add(socket#writeHandlerID));
            "unsubscribe" :: topic :: _ :
                _ = vertx#sharedData()#getSet(topic)#remove(socket#writeHandlerID);
            "publish" :: topic :: msg :: _ :
                (println "Publish to topic is \(topic)";
                 it = vertx#sharedData()#getSet(topic)#iterator();
                 (it#hasNext())loop
                   (println "Sending to verticle";
                    vertx#eventBus()#publish(string it#next(), newStringBuffer msg)));
            _ : ();
            esac;
        done);
    done)#listen(1234);
    \();
done;
