/*
 * Copyright 2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
module proxyServer;

load yvertx;
httpc = load yvertx.httpc;
https = load yvertx.https;

import org.vertx.java.core.Handler;
import org.vertx.java.core.SimpleHandler;
import org.vertx.java.core.buffer.Buffer;
import org.vertx.java.core.http.HttpClient;
import org.vertx.java.core.http.HttpClientRequest;
import org.vertx.java.core.http.HttpClientResponse;
import org.vertx.java.core.http.HttpServerRequest;
import org.vertx.java.deploy.Verticle;


verticle do {vertx, container}:
    client = vertx |> httpc.create "localhost:8282";
    
    (vertx |> https.createWithHandler do req:
        println "Proxying request: \(req#uri)";
        cReq = client |> httpc.generalRequest req#method req#uri [:] do cRes:
            println "Proxying response: \((cRes is ~HttpClientResponse)#statusCode)";
            req#response#statusCode := cRes#statusCode;
            req#response#headers()#putAll(cRes#headers());
            req#response#setChunked(true);
            cRes |> httpc.dataHandler do data:
                println "proxing response body: \(data)";
                req#response#write(data);
            done;
            cRes |> httpc.endHandler do:
                req#response#end();
            done;
        done;
        cReq#headers()#putAll(req#headers());
        cReq#setChunked(true);
        req |> https.dataHandler do buffer:
            println "Proxing request bodey: \(buffer)";
            cReq#write(buffer);
        done;
        req |> https.endHandler \(cReq#end());
    done)#listen(8080);
    \();
done;
