/*
 * Copyright 2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
module uploadServer;

load yvertx;
https = load yvertx.https;

import org.vertx.java.core.file.AsyncFile;

import java.util.UUID;


verticle do :
    fs = fileSystem;
    (https.createWithHandler do req:
        req#pause();
        filename = "upload/file-\(UUID#randomUUID()).upload";
        fs.open [] filename \case of
            Some file:
               (pump = createPump req (file is ~AsyncFile)#getWriteStream();
                start = System#currentTimeMillis();
                endHandler req do:
                    fs.closeAFile file \case of
                        Some _ : 
                            (req#response#end();
                             end = System#currentTimeMillis();
                             println "Uploaded \(pump#getBytesPumped()) bytes to \(filename) in \(end - start) ms");
                        Exception ex: 
                            (ex is ~Exception)#printStackTrace(System#err);
                    esac;
                done;
                pump#start();
                req#resume());
            Exception ex: 
               (_ = req#resume();
                _ = req#response#end();
                println ex);
        esac;
        
    done)#listen(8080);
    \()
done;
