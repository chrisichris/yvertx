/*
 * Copyright 2013 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module yeb.mvc.request;

std = load yeb.std;
load yeb.mvc.mvc;
validation = load yeb.validation;



/**
 * Group: url (HEADER)
 *
 * Reads the Host header field from the request
 */
host request = 
    req.headers["host"];

/**
 * Group: url
 *
 * Retrieves the protocol (either http or https)
 */
protocol request = 
    if "scheme" in headers then
        headers[scheme]
    else
        "http"
    fi;

/**
 * Group: url
 *
 * Checks whether the protocl is https. Same as protocol req == "https"
 */
secure? request = (protocol request) == "https";

/**
 * Group: url
 *
 * The domain name from the host see the host function
 */
domain request =
    strLeftOf (host request) ":";

/**
 * Group: url
 *
 * The subdomains from the domain. 
 *
 * : //Host: "go.in.example.com"
 * : subdomains req
 * : // => ["go", "in"]
 */
subdomains request =
    (ls = strSplit '\.' (domain request);
    take (max 0 (length ls - 2)) ls);

/**
 * Group: params (PARAMS)
 *
 * Tries to get the first parameter value for the given name from the params
 * hash and invokes someFn with the value. If there is no parameter it invokes
 * noneFn with the name and returns the result.
 *
 * Example:
 *
 * : //get the user-name from request params and if there is none
 * : //use the default name 'anon'
 * : user = param \"anon" id "user" req.params
 * :
 * : //get Some value or None name for params
 * : user = param None Some "user" req.queryParams
 * :
 * : //fail if a param is not prsent
 * : user = param std.fail id "user" req.allParams
 * :
 *
 * Arguments:
 * - noneFn : function invoked with name if non value parameter-value can
 *   be found
 * - someFn : function invoke with value if value present
 * - name : parameter name
 * - params : parameter map (generally from request)
 */
param noneFn someFn name params =
    if name in params then
        ls = params[name];
        if not empty? ls then
            someFn (head ls);
        else 
            noneFn name
        fi
    else
        noneFn name
    fi;

/**
 * Group: params
 *
 * gets the parameter value or throws a validationException if the value
 * is not present
 */
requireParam name = 
    param do:
            vali = failWithValidation "No value for parameter \(name)"
        done
        id 
        name;
/**
 * Group: header (HEADER)
 *
 * Check if the request was issued with the "X-Requested-With" header field 
 * set to "XMLHttpRequest" (jQuery etc).
 */
xhr? req = 
    std.maybeAt \false ((== "xmlhttprequest") . strLower)
        "X-Requested-With"
        req.headers;


_contentTypeRegex = like '^\s*([\*\w]+)(/([\*\w]+))?';

/**
 * Group: header
 *
 * Checks wheter the content-type of the rquest ist of the given mime/type
 */
isType contentType request =
    ari = _contentTypeRegex contentType ();
    if empty? ari then
        failWith "No valid mime-type pattern input \(contentType)";
    else
        aMa = ari[1];
        aMi = ari[3];
        do request:
            if "Content-Type" in request.headers then
                ct = request.headers["Content-Type"];
                ar = _contentTypeRegex 
                        request.headers["Content-Type"]
                        ();
                if not empty? ar then
                    rMa = ar[1];
                    rMi = ar[3];
                    if aMi == "" then
                        aMa == "*" or aMa == rMi 
                    elif aMa == "*" then
                        aMi == "*" or aMi = rMi
                    elif aMi == "*" then
                        aMa == rMa
                    else
                        aMa == rMa and aMi rMi
                    fi
                else
                    false
                fi;

            else
                false;
            fi;

        done;
    fi;
{
    request,
    host,
    protocol,
    secure,
    domain,
    subdomains,
    param,
    allParam,
    requireParam,
    xhr?,
    isType,
}

