module yvertx.server;

import java.io:File;
import org.yvertx.java.core.http:HttpServerRequest,
                                 RquestMatcher;
import org.yvertx.java.deploy.Verticle;
import org.yvertx.java.busmods.BusModBase;

load yvertx;

staticFileConf = {
    webRootPrefix = "web",
    gzipFiles = false,
};
serveStaticFileAtPath conf req path =
    (headers = requestHeaders req;
    acceptEncodingGzip = if "accept-encoding" in headers then
            strIndexOf headers.["accept-encoding"] "gzip" 0 > -1;
        else
            false
        fi;
    fileName = conf.webRootPrefix ^ path;
    if path == "/" then
        req#response#sendFile(conf.indexPage as ~String);
    elif strIndexOf path ".." 0 < 0 then
        if conf.gzipFiles and acceptEncodingZip then
            file = new File(PathAdjuster#adjust(fileName ^ ".gz"));
            if file#exists() then
                req#response#putHeader("content-encoding", "gzip");
                req#response#sendFile(fileName ^ ".gz");
            else
                req#response#sendFile(fileName);
            fi
        else
            req#response#sendFile(fileName);
        fi
    else
        req#response#statusCode = 404;
        req#response#end();
    fi);

serveStaticFile conf req =
    serveStaticFileAtPath conf req req#path;



bridgeRequest bustarget reqO =
    bodyHandler reqO do buffer:
        req = {
            headers = requestHeaders reqO,
            method = reqO#method,
            path = reqO#path,
            query = reqO#query,
            uri = reqO#uri,
            params = params reqO,
            body = buffer#getBytes()};
        requestBody bustarget req do resp:
            rsqO#response#statusCode := maybeDefined? \200 isNumber res.status;
            
            if defined? res.statusMessage then
                reqO#response#statusMessage := string res.statusMessage
            fi;
            
            if defined? res.headers then
                putResponseHeaders reqO res.headers
            fi;
            
            if defined? res.file then
                handleStaticFile (string res.file);
            elif defined? res.body then
                reqO#response#write(newByteBuffer res.body);
            fi;
            reqO#response#end()
        done
    done;


proxyRequest proxyTo = 
    (client = createHttpClient proxyTo;
    do req:
        cReq = httpRequest client;
            (Request {method = (req is ~HttpServerRequest)#method, 
                      uri = req#uri}) 
            [:]
            do cRes:
                req#response#statusCode := cRes#statusCode;
                req#response#headers()#putAll(cRes#headers());
                req#response#setChunked(true);
                dataHandler cRes do data:
                    _ = req#response#write(data);
                done;
                endHandler cRes do:
                    req#response#end()
                done;
            done;
        cReq#headers()#putAll(req#headers());
        cReq#setChunked(true);
        dataHandler req do buffer:
            _ = cReq#write(buffer);
        done;
        endHandler req do: cReq#end() done;
    done);

serverConf = {
    ssl = false,
    key_store_password = "wibble",
    key_store_path = "server-keystore.jks",
    static_files = true,
    bridge = false,
    inbound_permitted = [],
    outbound_permitted = [],
    sjs_config = {prefix = "/eventbus"},
    auth_timeout = 5 * 60 * 1000,
    auth_address = "vertx.basicauthmanager.authorise",
    gzip_files = false,
    web_root = "web",
    index_page = "index"
};

class WebServer extends Verticle

    void start()
	super#start();

        server = createHttpServer ();
        confo = config ();

        con = {
            ssl = maybeDefined \false isBoolean confo.ssl,
            keyStorePassword = maybeDefined \"wibble" isString 
                                                confo.key_store_password,
            keyStorePath = maybeDefined \"server-keystore.jks" isString
                                        confo.key_store_path,
                                        
            staticFiles = maybeDefined \true isBoolean confo.static_files,
            bridge = maybeDefined \false isBoolean confo.bridge,
            sjsServer = createSockJSServer server,
            inboundPermitted = maybeDefined \[emptyJS] 
                                            id 
                                            confo.inbound_permitted,
            outboundPermitted = maybeDefined \[emptyJS]
                                            id
                                            confo.outbound_permitted,
            sjsConfig = maybeDefined \{prefix = "/eventbus"} id
                                    confo.sjs_config,
            sjsOpts = [
                AuthTimeout (maybeDefined \(5 * 60 * 1000) isNumber
                                    confo.auth_timeout),
                AuthAddress (maybeDefined \"vertx.basicauthmanager.authorise"
                                          isString
                                          confo.auth_address)],
            gzipFiles = maybeDefined \false isBoolean confo.gzip_files,
            webRoot = maybeDefined \"web" isString confo.web_root,
            index = maybeDefined \"index.html" isString confo.index_page
        };

        conf = con with {
            webRootPrefix = con.webRoot ^ File#separator,
            indexPage = con.webRoot ^ File#separator ^ index,
        };

        if defined? confo.routes or conf.staticFiles then
            rm = newRouteMatcher ();
            if conf.staticFiles then
                _=rm.noMatch (handleStatic conf);
            fi;
            for (maybeDefined \[] id confo.routes) do route:
                if defined? route.pattern then
                    pattern = isString route.pattern;
                    handler = case maybeDefined? \"" isString route.type of
                    "proxy":
                        if not defined? route.host_port then
                            failWith "Must defined host_port parameneter on prxyout \(pattern)";
                        fi;
                        handleProxy (isString route.host_port);
                    "request" : 
                        if not defined? route.bus_target then
                            failWith "Must define bus_target on route \(pattern)"
                        fi;
                        handleReq conf (isString route.bus_target);
                    x : failWith "unknown type \(x) on route \(pattern)";
                    esac;
                    rm.route pattern handler;
                else
                    failWith "Missing pattern string in route \(route)"
                fi
            done;
        fi;

        if conf.ssl then
            _ = server#setSSL(true)
                #setKeyStorePassword(conf.keyStorePassword)
                #setKeyStorePath(conf.keyStorePath);
        fi;

        if conf.bridge then
            
            bridge sjsServer conf.sjsOpts 
                            conf.sjsConfig 
                            conf.inboundPermitted 
                            conf.outboundPermitted;
        fi;
        
