/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module yvertx.net;

import org.vertx.java.core: Handler, Vertx;
import org.vertx.java.core.net:NetSocket,
                               WebSocket,
                               NetServer;


yvertx = load yvertx;

toSocketHandler fn is (~NetSocket -> 'a) -> ~Handler =
        yvertx.toHandler fn;

dataHandler socket handler = 
    (socket is ~NetSocket)#dataHandler(yvertx.toBufferHandler handler);
    
endHandler socket handler =
    (socket is ~NetSocket)#endHandler(yvertx.toSimpleHandler handler);

closedHandler socket handler =
    (socket is ~NetSocket)#closedHandler(yvertx.toSimpleHandler handler);
    
drainHandler socket handler =
    (socket is ~NetSocket)#drainHandler(yvertx.toSimpleHandler handler);

exceptionHandler socket handler =
    (socket is ~NetSocket)#exceptionHandler(
        yvertx.toExceptionHandler handler);

connectClient vertx hostPort settings exceptionHandler handler=
   ({host,port} = yvertx.helper.hostAndPort hostPort;
    cl = (vertx is ~Vertx)#createNetClient();
     _ = settings cl; 
     cl#exceptionHandler(yvertx.toExceptionHandler exceptionHandler);
     cl#connect(port is number, host is string,
                toSocketHandler handler);
     cl);
    
createServer vertx =
    (vertx is ~Vertx)#createNetServer();

connectHandler server handler =
    (server is ~NetServer)#connectHandler(toSocketHandler handler);

createServerWithHandler vertx handler =
    connectHandler (createServer vertx) handler;
{
    toSocketHandler,
    dataHandler,
    endHandler,
    drainHandler,
    closedHandler,
    exceptionHandler,
    connectClient,
    createServer,
    createServerWithHandler,
    connectHandler,
}
    
