/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module org.yeb.mvc.webutils;

                
                
                

load org.yeb.std;
load org.yeb.validation;

typedef responseContentType = {
    statusCode is number,
    headers is hash<string,list<string>>,
    body is File string | String string | Html string | Bytes ~byte[] | None (),
};

typedef requestType = {
    serverPort is number,
    method is string,
    scheme is string,
    uri is string,
    path is string,
    matchedPath is string,
    query is string,
    headers is hash<string,list<string>>, //names are downcased
    body is ~byte[],
    params is hash<string,list<string>>,
    respond is responseContentType -> ()
};

typedef handlerResult =
    Completed responseContentType |
    NotHandled string |
    Handling string ;


urlDecode str =
   (import java.net.URLDecoder;
    string URLDecoder#decode(str, "UTF-8"));
    
urlEncode str = 
   (import java.net.URLEncoder;
    string URLEncoder#encode(str, "UTF-8"));
    
    
parseQueryParams query =   
   (h = if strTrim query == "" then
        [:];
    else
        ret = [:];
        m = query 
              |> strSplit '&'
              |> map (map urlDecode . strSplit '=');
              
        for m do p:
            k = head p;
            v = if empty? (tail p) then "" else head (tail p) fi;
            l = if k in ret then
                    v :: ret.[k];
                else
                    [v]
                fi;
            ret.[k] := l;
        done;
        ret
    fi;
    setHashDefault h \[];
    h);


makeRequest serverPort method scheme uri headers body respondFn =
   (import java.net.URI;
    uriJ = new URI(uri);
    query = 
        (uq = uriJ#getQuery();
         if defined? uq then uq else "" fi);
    path = 
        (uq = uriJ#getPath();
         if defined? uq then uq else "" fi);
    {
        serverPort,
        method = strUpper method,
        scheme = strLower scheme,
        uri,
        headers = 
           (r = [:];
            forHash headers do k v:
                r.[strLower k] := v
            done;
            r),
        body,
        path,
        matchedPath = "",
        query,
        params = parseQueryParams query,
        respond = respondFn,
    } is requestType);


requestContent {body} =
   (import java.lang.String;
    (new String(body is ~byte[],"UTF-8")) as string);


maybeParam name falseFn trueFn {params} =
   (v = params.[name];
    if empty? v then
        falseFn name;
    else
        trueFn (head v);
    fi);
     
param name =
    maybeParam name  
        do name:
            failWithValidation 
                (message "noparam" "No request-parameter for name %1$s" [obj name]) 
                "";
        done
        id;
        
_ajaxHeader = "x-requested-with";

isAjax {headers} = 
   (_ajaxHeader in headers) and (headers.[_ajaxHeader] == "xmlhttprequest");

   
escape text =
   (import java.lang:Character;
    escapeT s =
         "&#\(Character#codePointAt(s.[0] is string, 0));";
     strJoin '' (matchAll '[<>&"]' escapeT id "\(text)"));

//"     

notHandled = NotHandled "";
handling = Handling "";

response statusCode headers body = {statusCode, headers, body} is responseContentType;

putListHash name value headers =
   (l = if name in headers then
            headers.[name]
        else
            [];
        fi;
    headers.[name] := l ++ [value];
    headers);
    
copyListHash headers =
    ret = [:];
     

addCookie name value opts headers =
   (import org.jboss.netty.handler.codec.http:DefaultCookie,
                                              CookieEncoder;
    cu = new DefaultCookie(name is string, value is string);
    for opts do opt: case opt of
        Comment co: cu#setComment(co is string);
        CommentUrl co: cu#setCommentUrl(co is string);
        Discard b : cu#setDiscard(b is boolean);
        Domain d: cu#setDomain(d is string);
        HttpOnly b: cu#setHttpOnly(b is boolean);
        MaxAge b: cu#setMaxAge(b is number);
        Path s: cu#setPath(s is string);
        Ports an: cu#setPorts(an is array<number>);
        Secure b: cu#setSecure(b is boolean);
        Version v: cu#setVersion(v is number);
        esac;
    done;
        
    enc = new CookieEncoder(true);
    enc#addCookie(cu);
    putListHash "Set-Cookie" enc#encode() headers);
    
getCookies headers =
    if "Cookie" in headers then
        import org.jboss.netty.handler.codec.http:CookieDecoder,
                                                  Cookie;
        import java.lang.Number;
        
        decoder = new CookieDecoder();
        ret = [:];
        hs = headers.["Cookie"] 
        |> concatMap do c: 
            decoder#decode(c) 
            |> mapJavaList do cuo:
                cu = cuo unsafely_as ~Cookie;
                {name = string cu#getName(),
                 value = string cu#getValue(),
                 comment = string cu#getComment(),
                 domain = string cu#getDomain(),
                 maxAge = string cu#getMaxAge(),
                 path = string cu#getPath(),
                 ports = cu#getPorts() |> mapJavaList do o:
                        (o unsafely_as ~Number)#intValue() 
                     done,
                 version = int cu#getVersion(),
                 discard = cu#isDiscard(),
                 httpOnly = cu#isHttpOnly(),
                 secure = cu#isSecure()}
            done    
        done;
        
        for hs do c:
            ret.[c.name] := c;
        done;
        ret;
    else
        [:]
    fi;
    
redirectView url is string -> responseContentType = 
   response 302 
            ["Location":[url]]
            (Html "<html><body>redirectiong to: <a href=\"\(url)\">\(url)</a></body></html>");

errorView html =
    response 404
        [:]
        (Html "<html><body>\(html)</body></html>");

writer () = 
   (import java.lang.StringBuilder;
    bd = new StringBuilder();
    {
        print st = bd#append(escape st),
        echo st = bd#append(st is string),
        get string () = string bd,
        get html () = Html (string bd),
        builder = bd
    });


contentView cT headers body = 
   (c = if (strStarts? cT "text") and ((strIndexOf cT ";" 0) > 0) then 
            cT 
        else 
            cT ^ "; charset=utf-8" 
        fi;
    headers.["Content-Type"] := [c];
    response 200 headers body);



htmlView headers html =
   (contentView "text/html; charset=utf-8" headers (Html html));

jsonView headers struct =
   (json = load org.yeb.json;
    str = json.write [] struct;
    contentView "application/json; charset=utf-8" headers (String str));

cacheForSeconds seconds mustRevalidate headers = (
    if seconds > 0 then
        //HTTP1.0 header
        headers.["Expires"] := [string (System#currentTimeMillis() + (seconds * 1000))];
        //HTTP1.1 header
        hv = "max-age=\(seconds)\(if mustRevalidate then ', must revalidate' else '' fi)";
        headers.["Cache-Control"] := [hv];
    else
        headers.["Pragma"] := ["no-cache"];
        headers.["Expires"] := ["1"];
        headers.["Cache-Control"] := ["no-cache"];
        headers.["Cache-Control"] := ["no-store"];
    fi;
    headers
);
        

//+++++++++++++++++++++++Utils ++++++++++++++++++++++++++++


url strList = (
    if empty? strList then
        ""
    else
        strb = new java.lang.StringBuilder();
        var hasQuestion = false;
        var isName = false;
        var isFirstName = false;
        for strList do str:
            if (not hasQuestion) then
                cut = strIndexOf str "?" 0;
                if cut == ((strLength str )- 1) then
                    if strb#length() > 0 then
                        strb#append("/")
                    fi;
                    strb#append(str);
                    hasQuestion := true;
                    isName := true;
                    isFirstName := true;
                elif cut == 0 then
                    strb#append(str);
                    if not (strEnds? str "=") then
                        strb#append("=");
                    fi;
                    hasQuestion := true;
                    isName := false;
                elif cut > 0 then
                    if strb#length() > 0 then
                        strb#append("/")
                    fi;
                    strb#append(str);
                    if not (strEnds? str "=") then
                        strb#append("=");
                    fi;
                    hasQuestion := true;
                    isName := false;
                else
                    if strb#length() > 0 then
                        strb#append("/")
                    fi;
                    strb#append(str);();
                fi
            else
                if isName then
                    if not isFirstName then strb#append("&"); fi;
                    strb#append(str);
                    strb#append("=");
                    isName := false;
                else
                    r = urlEncode str;
                    strb#append(r);
                    isName := true;
                fi
           fi
       done;
       strb#toString();
   fi;
);

urlParam str name value = (
    hasQuestion = (strIndexOf str "?" 0) > -1;
    strb = new java.lang.StringBuilder(str);
    if hasQuestion then
        strb#append("&");
    else
        strb#append("?");
    fi;
    strb#append(name)#append("=")#append(urlEncode value);
    string strb;
);

ptag name params content is string -> hash<string,string> -> list<string> -> string = (
    var strb = new java.lang.StringBuilder();
    strb := strb#append("<")#append(escape name);
    forHash params do k v:
        strb := strb#append(" ")#append(escape k)#append('="')#append(escape v)#append('"');
    done;
    if empty? content then
        strb := strb#append("/>");
    else
        strb := strb#append(">")#append(strJoin "\n" content)#append("</")#append(name)#append(">");
    fi;
    strb#toString();
);
    

{

    HEADER_PRAGMA = "Pragma",
    HEADER_EXPIRES = "Expires",
    HEADER_CACHE_CONTROL = "Cache-Control",
	
    (@) text = escape text,

    urlDecode, 
    urlEncode, 
    parseQueryParams, 
    makeRequest, 
    requestContent, 
    maybeParam,
    param, 
    isAjax, 
    escape,
    notHandled, 
    handling, 
    response, 
    putListHash, 
    redirectView,
    errorView, 
    writer, 
    contentView, 
    htmlView, 
    jsonView, 
    cacheForSeconds, 
    url, 
    urlParam,
    ptag,

    addCookie, getCookies,
    
    /*
    encodeForBase64 bytes wrap = 
        string ESAPI#encoder()
            #encodeForBase64(bytes is ~byte[],wrap is boolean),
    decodeFromBase64 str = 
        ESAPI#encoder()#decodeFromBase64(str is string),
    encodeForCSS str = 
        ESAPI#encoder()#encodeForCSS(str is string),
    encodeForHTML str = 
        ESAPI#encoder()#encodeForHTML(str is string),
    encodeForHTMAttribute str = 
        ESAPI#encoder()#encodeForHTMLAttribute(str is string),
    encodeForURL str = 
        ESAPI#encoder()#encodeForURL(str is string),
    encodeForXML str = 
        ESAPI#encoder()#encodeForXML(str is string) */
}