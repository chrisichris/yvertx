/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module yeb.yvertx.testutils;

import org.vertx.java.core:Vertx;
import org.vertx.java.core.buffer:Buffer;
import org.vertx.java.platform:Container;
import org.vertx.java.testframework:TestUtils;


load yeb.yvertx;

_runTestsImpl tests resultO allResults vertx container =
    if empty? tests then
        oallResults = reverse allResults;
        f = oallResults |> map do {name,result}:
            case result of
            Failure msg: Some {name, msg};
            _ : none;
            esac
            done
            |> catSome;
        ok = oallResults |> map do {name,result}:
            case result of
            Success msg : Some {name, msg};
            _ : none;
            esac
            done
            |> catSome;
        exs = oallResults |> map do {name,result}:
            case result of
            Exception ex: Some {name, msg = string ex};
            _ : none;
            esac
            done
            |> catSome;
        println "=========\nResults of runTest\n----------";               
        println "TAP version 13";
        println "1..\(length allResults)";

        var count = 0;
        if length ok == 0 then
            println "\nno succesful results\n";
        else
            println "\nSuccesful results: \n";
            for ok do {name, msg}:
                count := count + 1;
                println "ok \(count) - [\(name)] : \(msg)"
            done;
        fi;

        if length f == 0 then
            println "\n---\nno failures\n";
        else
            println "\n---\nFailed results: \n"; 
            for f do {name, msg}: 
                count := count + 1;
                println "not ok \(count) - [\(name)] : \(msg)"
            done;
        fi;

        if length exs == 0 then
            println "\n---\nno exceptions\n";
        else
            println "\n---\nException results: \n"; 
            for exs do {name, msg}: 
                count := count + 1;
                println "not ok \(count) - [\(name)] : \n\(msg)"
            done;
        fi;

        println "---\ntotal:\n";
        if length f > 0 or length exs > 0 then
            print "Failure :";
        else
            print "Ok :";
        fi;
        println "total runs: \(length allResults); ok: \(length ok); failures: \(length f); exceptions: \(length exs)";
        import java.lang.System;
        if length allResults != length ok then
            System#exit(1);
        else
            System#exit(-1);
        fi
    else
        case resultO of
        None _ : 
            ({name,test} = head tests;
            res= {
                name is string,
                var result = none,
                var stopTime = 0,
                setTimeout tm =
                    stopTime := System#currentTimeMillis() + tm,

                assert msg suc=
                    if suc then
                        case result of
                        Failure msg: ();
                        _ : result := Success (msg is string);
                        esac
                    else
                        result := Failure msg;
                        stopTime := 0;
                    fi,
                assure msg suc =
                    (assert msg suc;
                    stopTime := 0);
            };
            res.setTimeout 1000;
            try
                print "\n[\(name)] running .";
                test res;
                _runTestsImpl tests (Some res) allResults vertx container;
            catch Exception ex:
               (container is ~Container)#getLogger()
                                    #error("test: [\(name)]",ex);
               //run next tests but with bad result
               _runTestsImpl (tail tests)
                             none
                             ({name, result = Exception ex} 
                                :: allResults)
                             vertx
                             container;
            yrt);
        Some res:
            (if System#currentTimeMillis() < res.stopTime then
                print ".";
                _ = setTimer 100 
                    \(_runTestsImpl tests resultO allResults vertx container)
            else
                case res.result of
                Success msg : _runTestsImpl (tail tests)
                                  none
                                  ({name = res.name, result = Success msg} 
                                    :: allResults)
                                  vertx
                                  container;
                None _ :
                    (msg = "timed out";
                    container#getLogger()#error("failure in \(res.name): \(msg)");
                    _runTestsImpl (tail tests)
                                  none
                                  ({name = res.name, result = Failure msg} 
                                    :: allResults)
                                  vertx
                                  container);
                Failure msg : 
                    (container#getLogger()#error("failure in \(res.name): \(msg)");
                    _runTestsImpl (tail tests)
                                  none
                                  ({name = res.name, result = Failure msg} 
                                    :: allResults)
                                  vertx
                                  container);
                esac
            fi)
        esac;
    fi;


{

    runTests opts tests =
        (includes =  array [];
        excludes = array [];
        for opts \case of
            Include str : push includes str;
            Exclude str : push excludes str;
            esac;
        
        testNames = tests |> mapHash do name _ : name done;

        included = if empty? includes then
                testNames;
            else
                includes 
                |> concatMap do pattern:
                        testNames |> filter (=~ pattern);
                    done
                |> nub
            fi;

        ts = 
            excludes
            |> fold do r pattern:
                    r |> filter ((not) . ( =~ pattern))
                done included
            |> sort
            |> map do name:
                    {name,
                    test = tests[name]}
                done;

        println "start testing: tests \(ts |> map (.name))";
        _runTestsImpl ts none [] vertx container),

}

