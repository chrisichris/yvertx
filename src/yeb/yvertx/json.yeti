/*
 * Copyright 2013 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module yeb.yvertx.json;

import org.vertx.java.core.json:JsonObject,
                                JsonArray;
import org.vertx.java.core.buffer:Buffer;

typedef jsonStruct<a> = {.for_json is a};


/**
 * Group: json (JSON)
 * Empty json element (should repsenet an empty struct as this is not
 * possible in yeti
 */
emptyJS is jsonStruct<E()>= {for_json = E()};


_toJson object = 
   (import yeti.lang:Num, FloatNum, RatNum,AList, ByKey, Struct, Tag;
    import java.util:ArrayList,Map, HashMap;
  
    nullTag ob = 
        (o = ob as ~Object;
        if o instanceof Tag then
            t = o unsafely_as ~Tag;
            t#name == "E" and nullptr? t#value;
        else
            false
        fi);

        
    o = object as ~Object;
    if nullptr? o then
        o
    elif same? o (emptyJS as ~Object) then
        new JsonObject()
    elif nullTag o then
        () as ~Object;
    elif (o instanceof FloatNum) 
         or (o instanceof RatNum) then
        (o unsafely_as ~Num)#toBigDecimal();
    elif (o instanceof Num) then
        (o unsafely_as ~Num)#toBigInteger();
    elif o instanceof AList then
        jl = new JsonArray();
        for (o unsafely_as list<'a>) do v:
            if not nullTag v then
                _ = jl#add(_toJson v);
            fi;
        done;
        jl as ~Object;
    elif o instanceof ByKey then
        dbo = new HashMap();
        i = (o unsafely_as ~Map)#entrySet()#iterator();
        i#hasNext() loop
            (e = i#next() unsafely_as ~java.util.Map$Entry;
             key = string (e#getKey());
             v = e#getValue();
             if not nullTag v then
                 _ = dbo#put(key, _toJson (v unsafely_as 'a));
             fi);
        new JsonObject(dbo);
    elif o instanceof Struct then
        st = o unsafely_as ~Struct;
        dbo = new HashMap();
        for [0 .. st#count() - 1] do i:
            name = st#name(i);
            v = st#get(i);
            if not nullTag v then
                _ = dbo#put(name, _toJson (v unsafely_as 'a));
            fi;
        done;
        new JsonObject(dbo);
    elif o instanceof Tag then
        t = o unsafely_as ~Tag;
        if t#name == "Some" then
            _toJson (t#value unsafely_as 'a);
        elif t#name == "None" then
            () as ~Object;
        else
            dbo = new HashMap();;
            _ = dbo#put("_vtype",t#name);
            _ = dbo#put(t#name, _toJson (t#value unsafely_as 'a));
            new JsonObject(dbo);
        fi
    else
        o
    fi);

/**
 * Group: json
 * Transforms a yeti struct to a ~JsonObject. 
 * 
 * Each struct must have the field json. If the value of the field is
 * E() than it is not serialized.
 *
 * The filed-types of the struct maybe:
 * - number - becomes either a bigdecimal or a biginteger
 * - string - becomes a string
 * - boolean - becomes a Boolean
 * - None x - becomes null x is ignored
 * - Some x - becomes the value of x, where x must be one of the allowed values
 * - null - becomes null
 * - list?<x> - becomes JsonArray. Note the remmarks for empty lists
 * - struct<x> - another struct which must have the same form as this
 * - hash<x,y> - the key is transfered to a string the value must be one of
 *   this types
 * - E() - means that the value and filed is not included in struct and hash
 *   or list
 *
 * As empty lists [] in yeti are represtend as null it is necessary to give in
 * [E()] if there must be an empty list instead of a null in the corresponding
 * json. 
 *
 * If a certain field should be excluded give it the value N().
 *
 * Arguments:
 * struct - structure to transform to JsonObject
 *
 * Exceptions:
 * java.lang.RuntimeException - if the given argument is no struct
 */
toJson stru is jsonStruct<'a> -> ~JsonObject =
    _toJson stru unsafely_as ~JsonObject;

/**
 * Group: json
 * Transforms yeti list to a JsonArray. The elements can be any values
 * supported by json
 *
 * Arguments:
 * ls - the list to transform
 */
toJsonArray ls is list?<'a> -> ~JsonArray =
   (ar = new JsonArray();
    for ls do e:
        _ = ar#add(_toJson e)
    done;
    ar);
    
_fromJsonToStruct object = 
   (import java.util:List,HashMap,Map;
    import java.lang:Number;
    import yeb:HashStruct;
    import yeti.lang:Tag;
    
    o = object as ~Object;
    
    if nullptr? o then
         o;
    elif o instanceof Number then
       (import java.lang: Double, Float,Number;
        import java.math: BigInteger, BigDecimal;
        import yeti.lang:Num,BigNum,IntNum,FloatNum;
        if (o instanceof Double) or
             (o instanceof Float) or
             (o instanceof BigDecimal)
             then
                nu = o unsafely_as ~Number;
                new FloatNum(nu#doubleValue());
        elif o instanceof BigInteger then
            nu = o unsafely_as ~BigInteger;
            new BigNum(nu);
        elif o instanceof Num then
            o unsafely_as ~Num;
        else
            nu = o unsafely_as ~Number;
            new IntNum(nu#longValue());
        fi)
    elif o instanceof JsonArray then
        it = (o unsafely_as ~JsonArray)#iterator();
        ar = array [];
        (it#hasNext()) loop push ar (_fromJsonToStruct it#next());
        (list ar) as ~Object;
    elif o instanceof JsonObject then
        jo = o unsafely_as ~JsonObject;
        //check for variant
        if defined? jo#getString("_vtype",undef_str) 
            and defined? jo#getField("value") then
            new Tag(_fromJsonToStruct jo#getField("value"), 
                    jo#getString("_vtype"))
        else
            ma = new HashMap();
            i = jo#toMap()#entrySet()#iterator();
            i#hasNext() loop
               (e = i#next() unsafely_as ~java.util.Map$Entry;
                value = _fromJsonToStruct (e#getValue() unsafely_as 'a);
                if not nullptr? value then
                    ma#put(string e#getKey(), value);
                fi);
            new HashStruct(ma);
        fi;
    elif o instanceof Buffer then
        ((o unsafely_as ~Buffer)#getBytes()) as ~Object;
    else
        o
    fi);

typedef yvertxJsonValue<a> = {
    str is Some string | None (),
    num is Some number | None (),
    bool is Some boolean | None (),
    arr is list<yvertxJsonValue>,
    obj is hash<string,yvertxJsonValue>,
    bytes is Some ~byte[] | None (),
    type is number,
    stru is a
};

var _jsp = {
    str = none,
    num = none,
    bool = none,
    bytes = none,
    arr = [],
    obj = [:],
    type = 0,
    stru = (() unsafely_as ~Object) unsafely_as 'a
};

_jsonPrototype = {
    str = none,
    num = none,
    bool = none,
    bytes = none,
    arr = [],
    obj = 
        ha = [:];
        setHashDefault ha \(_jsp);
        ha,
    type = 0,
    stru = (() unsafely_as ~Object) unsafely_as 'a
};

_jsp := _jsonPrototype;



//the empty json object should just return itself so
//any value will get none (it is just empty)
setHashDefault _jsonPrototype.obj \(_jsonPrototype);

_fromJsonValue o is ~Object -> yvertxJsonValue<'a>= 
   (import java.util:List,HashMap,Map;
    import java.lang:Number;
    import yeb:HashStruct;
    import yeti.lang:Tag;
    

    if nullptr? o or not defined? o then
         _jsonPrototype;
    elif o instanceof JsonObject then
        jo = o unsafely_as ~JsonObject;
        ha = [:];
        var calculated? = false;
        _jsonPrototype with {
            get obj () = 
                if calculated? then
                    ha
                else
                    for (mapJavaList string jo#getFieldNames()) do name:
                        ha[name] := 
                            _fromJsonValue 
                                jo#getField(name is string);
                    done;
                    setHashDefault ha \(_jsonPrototype);
                    calculated? := true;
                    ha
                fi,
            get stru () = (_fromJsonToStruct o) unsafely_as 'a, 
            type = 1,
        }
    elif o instanceof JsonArray then
        it = (o unsafely_as ~JsonArray)#iterator();
        ar = array [];
        (it#hasNext()) loop push ar (_fromJsonValue it#next());
        ls = (list ar);
        _jsonPrototype with {
            list = ls,
            type = 2 
        }
    elif o instanceof String then
        s = string o;
        _jsonPrototype with {
            str = Some s,
            someStr = Some s,
            type = 3,
        }
    elif o instanceof Boolean then
        s = (o unsafely_as ~Boolean)#booleanValue();
        _jsonPrototype with {
            bool = Some s,
            type = 4
        }
    elif o instanceof Number then
        import java.lang: Double, Float,Number;
        import java.math: BigInteger, BigDecimal;
        import yeti.lang:Num,BigNum,IntNum,FloatNum;
        nu = if (o instanceof Double) or
             (o instanceof Float) or
             (o instanceof BigDecimal)
             then
                nu = o unsafely_as ~Number;
                new FloatNum(nu#doubleValue());
        elif o instanceof BigInteger then
            nu = o unsafely_as ~BigInteger;
            new BigNum(nu);
        elif o instanceof Num then
            o unsafely_as ~Num;
        else
            nu = o unsafely_as ~Number;
            new IntNum(nu#longValue());
        fi;
        numi = (nu unsafely_as number);
        _jsonPrototype with {
            num = Some numi,
            type = 5
        }
    elif o instanceof Buffer then
        b = (o unsafely_as ~Buffer)#getBytes();
        _jsonPrototype with {
            bytes = Some b,
            type = 6
        }
    else 
        failWith "value not supported \(o)";

    fi);

/**
 * Group: json
 * Transforms a JsonObject to a struct. The result will always be a 
 * polymorphic value which represents the JsonObject as struct. So no
 * typechecking is performed on the result but it can be used as a struct.
 *
 * Arguments:
 * jsonObject - the object to transfer 
 */
fromJson object is ~JsonObject -> 'a =
    _fromJsonValue object;

/**
 * Group: json
 * Transrom a JsonArray to a yeti list. The result will alwys be a
 * polymphric value which represnte the JsonObject. So no typechecking is
 * preformed on the values of the list
 *
 * Arguments:
 * jsonArray - the JsonArray object to transfer
 */
fromJsonArray ar is ~JsonArray -> list<'a> =
    (_fromJsonValue ar).arr;    



_blend vin1 vin2 is 'a -> 'b -> 'c=
    (import yeti.lang:Struct,
                      GenericStruct;
    import java.util.HashMap;

    o1 = (vin1 is 'a) unsafely_as ~Object;
    o2 = (vin2 is 'b) unsafely_as ~Object;
    if defined? o1 and defined? o2 and 
       o1 instanceof Struct and o2 instanceof Struct then

        s1 = o1 unsafely_as ~Struct;
        s2 = o2 unsafely_as ~Struct;
        jmap = new HashMap();
        for [0..(s1#count() - 1)] do i:
            na = s1#name(i);
            va = s1#get(i);
            _ = jmap#put(na,va);
        done;
        for [0..(s2#count() - 1)] do i:
            na = s1#name(i);
            va = s1#get(i);
            ov = jmap#get(na);
            va2 = if defined? ov 
                    and (ov unsafely_as ~Object) instanceof Struct then
                    _blend (ov unsafely_as 'a) (va unsafely_as 'b)
                  else 
                      va;
                  fi;
            _ = jmap#put(na,va2);
        done;
        (new GenericStruct(jmap)) unsafely_as 'c;
    else
        o1 unsafely_as 'c;
    fi);

/**
 * Group: json
 * Replaces in the struct the fiels of v1 with the fields of v2 if presten.
 * Works only on struct arguments if either argument is not a struct then
 * the first argument is returen.
 *
 * This is useful when transforming getting a Json struct fom "fromJson" and
 * prefilling it with default values
 *
 * Arguments:
 * v1 - the strcut which is the basis
 * v2 - the strcut which replaces in v1
 *
 * Examples:
 * :defaultV = {ssl=true, port=8080}
 * :withDefaults = blend defaultV (toJson someJsonObject);
 */
blend v1 v2 is 'a -> 'b -> 'c =
    (blend v1 v2) unsafely_as 'c;

{
    emptyJS, 
    toJson, 
    toJsonArray,
    fromJson, 
    fromJsonArray
}

