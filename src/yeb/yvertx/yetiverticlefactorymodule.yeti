/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module yeb.yvertx.yetiverticlefactorymodule;

import java.lang:ClassLoader,
                 Throwable,
                 Thread;

import java.lang.reflect: InvocationTargetException;

import java.io.File;
import java.net:URLDecoder,
                URLClassLoader,
                URL;

import org.vertx.java.core:Vertx,
                           VoidResult;
import org.vertx.java.core.logging:Logger;
import org.vertx.java.platform: Verticle,
                                 Container,
                                 VerticleFactory;

teti = load yeb.teti;                                    
vhl = load yeb.yvertx.vertxholder;
std = load yeb.std;
load yeb.promise;
        

class MockVerticle extends Verticle
    void start() 
        println "\nFix Error and save to redeploy.";
        println "waiting for redeploy ....",
end;

class ReplVerticle extends Verticle
    void start()
        eval = load yeti.lang.compiler.eval;
        yvertx = load yeb.yvertx;
        
        //sends messages between worker and vertickel
        fibre = yvertx.newFibre ();
        //evaluates yeti code
        var evalFn = eval.evaluateYetiCode 
            []
            [Bind()];
        
        //read from stdin on a worker
        yvertx.newWorker do:
            _ = fibre.register do out cb:
                case out of
                    None _: ();
                    Some s: println (s is string);
                    Ex ex: (ex is ~Exception)#printStackTrace();
                esac;
                print "> ";

                readcode code = 
                    (line = readln();
                    if strEnds? line '\' then
                        line = strLeft line (strLength line - 1);
                        readcode (code ^"\n"^line);
                    elif line == "" then
                        readcode code;
                    else
                        code^"\n"^line;
                    fi);
                code = readcode "";
                cb code
            done
        done
        >>- do:
            //after worker is created this function is called
            //send over the fibre to the worker the inital message
            //and als repsonse handler the handler of the code

            //the handler for the code read from the worker
            codeHandler code = 
                (outn = if code != "" then 
                        try 
                            Some (evalFn code).str;
                        catch Exception ex:
                            Ex ex;
                        yrt
                    else
                        none
                    fi;
                fibre.send outn codeHandler); 

            //send intial message with the handler
            fibre.send 
                (Some "\nYvertx [\(yetiRuntimeVersion)] REPL\n")
                codeHandler;
        done,
end;



_findYetiFiles dir exclude res =
    for (listDirectory false dir) do {directory?, file?, path,name}:
        if not contains? name exclude then
            if directory? then
                _findYetiFiles path [] res;
            elif file? then
                if strEnds? path ".yeti" or strEnds? path ".teti" then
                    push res path;
                fi
            else
                ()
            fi;
        fi
    done;

class YvertxURLClassLoader(URL[] urls, ClassLoader parent)
    extends URLClassLoader(urls, parent)
end;

//load the mod.json to see wheter autoredeploy
_autoredeploy? loader =
    (std = load yeb.std;
    ins = (loader is ~ClassLoader)#getResourceAsStream("mod.json");
    if defined? ins then
        js = inputHandle ins "UTF-8"
            |> getContents
            |> std.parseJson;
        //std.maybeBoolean \false id js.``auto-redeploy``; 
        maybe false id js.obj["auto-redeploy"].bool
    else
        false
    fi);

_createClassLoader loader verticleName =
    (import yeti.lang.compiler:CompileException;
    import java.lang: RuntimeException;
    import yeti.lang:Fun,
                     Struct;
   
    
    //the file name
    fileName = 
        (strReplace "." "/" 
            (strLeft verticleName ((strLength verticleName) - 5)))
        ^ strRight verticleName ((strLength verticleName) - 5);
    
    resourceURL = (loader is ~ClassLoader)#getResource(fileName);
    if not defined? resourceURL then
        failWith "no verticle found for \(fileName) given \(verticleName)";
    fi;
   
    srcDir =
        (fn = new File(URLDecoder#decode(resourceURL#getFile(), "UTF-8"))
                #getPath() as string;
        dir = strLeft fn (strLength fn - strLength fileName);
        if dir == "" then "."
        else dir fi);

    sourceFiles = array [];
    _findYetiFiles srcDir ["mods","lib"] sourceFiles;

    sourceFiles = sourceFiles 
        |> map' do sn:
            fl = new File(sn is string);
            /*
            if not fl#canRead() then
                failWith ("can not read file \(sourceFile#getAbsolutePath())"
                    ^"current dir is: \((new File("."))#getAbsolutePath())");
            fi;*/
            //fl#getAbsolutePath();
            fl#getPath() as string
        done;

    
    //the targetdir
    targetDir = 
        (load yeb.std;
        name = "vertx_yeti_classes_"
            ^ hashSHA1 (new File(srcDir))#getAbsolutePath();
        tmpDir = new File(System#getProperty("java.io.tmpdir"));
        newFile = new File(tmpDir, name);
        if not newFile#exists() then
            _ = newFile#mkdirs();
        fi;
        newFile#deleteOnExit();
        newFile);
    
    //compile with current loader
    //compile the yeti files
    eval = load yeti.lang.compiler.eval;
    println "[yetic] Compiling to: \(targetDir#getAbsolutePath())";
    eval.compileYetiFiles [To targetDir#getAbsolutePath(),
                           SourceReader teti.tetiSourceReader,
                           Warn println] 
                          [SourceDir srcDir] 
                          sourceFiles;

    //create URLClassLoader
    cl = new YvertxURLClassLoader(array [targetDir#toURI()#toURL()],
                                   loader);
    cl); 

_classLoaders = weakHash ();

        

createStandardVerticle verticleName = 
    (import yeti.lang.compiler:CompileException;
    import java.lang: RuntimeException;
    import yeti.lang:Fun,
                     Struct;

    var autoRedeploy = false;
    try

        oldCl = Thread#currentThread()#getContextClassLoader();
        cl = synchronized _classLoaders 
            \({ar,cl} = if oldCl instanceof YvertxURLClassLoader 
                or oldCl in _classLoaders then
                println "Using exting classloader for \(verticleName): \(oldCl)";
                _classLoaders[oldCl];
            else
                println "Creating new classloader for \(verticleName) : \(oldCl)";
                l = {
                    ar = _autoredeploy? oldCl,
                    cl = _createClassLoader oldCl verticleName
                };
                _classLoaders[oldCl] := l;
                l
            fi;
            autoRedeploy := ar;
            cl);
        Thread#currentThread()#setContextClassLoader(cl);
        
        //load the module and invoke it
        {className,functionName}  = 
            (pa = if strEnds? verticleName ".yeti" 
                or strEnds? verticleName ".teti" then
                strLeft verticleName (strLength verticleName - 5)
             else
                verticleName
             fi;
             cut = strIndexOf pa ":" 0;
             if cut < 0 then
                {className = pa, functionName = none}
             else 
                className = strLeft pa cut;
                fn = strRight pa (cut + 1);
                if strLength fn > 0 then
                    {className, functionName = Some fn}
                else
                    {className, functionName = none}
                fi
             fi);
        moduleCl = cl#loadClass(className);
        rs = moduleCl#getMethod("eval",() as ~Class[])
                 #invoke(() as ~Object,() as ~Object[]);
        
        //get the function for creating the verticle
        fn = case functionName of
            None _ : rs unsafely_as ~Fun;
            Some funName :
                ((rs unsafely_as ~Struct)#get(funName is string))
                    unsafely_as ~Fun;
            esac;

        //invoke the function
        fn#apply(() as ~Object) unsafely_as ~Verticle;
    catch CompileException ex:
        println "Yeti Compilation Error: \(ex#getMessage())";
        if autoRedeploy then
            (new MockVerticle()) as ~Verticle;
        else
            throw ex;
        fi
    catch InvocationTargetException ex:
        throw ex#getCause();
    finally
        //Thread#currentThread()#setContextClassLoader(oldCl);
    yrt);


class YetiVerticleFactory extends VerticleFactory
    //var loader = () as ~ClassLoader,
    
    void init(Vertx ve, Container cont, ClassLoader c)
        //loader := c;
        vhl.vertx := ve;
        vhl.container := cont,
    
    void close() 
        (),

    Verticle createVerticle(String verticleName)
        if System#getProperty("yvertx.repl","false") == "true" then
            _ = System#setProperty("yvertx.repl","false");
            try 
                moduleCl = Thread#currentThread()#getContextClassLoader()
                            #loadClass("yeb.yvertx.ReplVerticle");
                rs = (moduleCl#newInstance()) unsafely_as ~Verticle;
            
                rs;
            catch InvocationTargetException ex:
                throw ex#getCause();
            yrt;
        else
            createStandardVerticle verticleName
        fi,

    void reportException(Logger logger, Throwable t)
        logger#error("Exception in Yeti verticle script", t),

end;


class MainVerticle extends Verticle 
    var verticle = () as ~Verticle,
    
    void start(VoidResult startedResult) 
        factory = new YetiVerticleFactory();
        factory#init(this#getVertx(), this#getContainer(), 
                    Thread#currentThread()#getContextClassLoader());
        defaultName = 
            if std.mode.test? then
                "mainTest.yeti"
            else
                "main.yeti"
            fi;
        vname = 
            this#getContainer()#getConfig()#getString("name", defaultName);
        verticle := factory#createVerticle(vname);
        verticle#setContainer(this#getContainer());
        verticle#setVertx(this#getVertx());
        verticle#start(startedResult),

    void stop()
        verticle#stop(),
end;


()
