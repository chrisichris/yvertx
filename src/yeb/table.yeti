/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module yeb.table;

typedef opaque table<k,v> = ~TMap;

asTMap = (do t: (t is ~TMap) done) as table<'k,'v> -> ~TMap;


update k v table is 'k -> 'v -> table<'k,'v> -> table<'k,'v>=
    ((asTMap table)#update(k as ~Object, v as ~Object)) as table<'k,'v>;


remove k table is 'k -> table<'k,'v> -> table<'k,'v>=
    ((asTMap table)#remove(k as ~Object)) as table<'k,'v>;


maybeAt k nofn infn table 
    is 'k -> (() -> 'r) -> ('v -> 'r) -> table<'k, 'v> -> 'r =
    (r = (asTMap table)#get(k as ~Object, TMap#NULL_VALUE);
    if same? r TMap#NULL_VALUE then
        nofn ();
    else
        infn (r unsafely_as 'v)
    fi);
    
at k table = 
    maybeAt k \(failWith "No key \(k) in table") id table;

contains? k table =
    maybeAt k \true \false table;


count table =
    (asTMap table)#size();

seq table is table<'k, 'v> -> list<{key is 'k, value is 'v}>=
    ((asTMap table)#keyValueList()) unsafely_as list<{key is 'k, value is 'v}>;

forTable table fn =
    for (seq table) do {key,value}: fn key value done;

create ha is hash<'k,'v> -> table<'k,'v> = 
    (var t = TMap#EMPTY as table<'k,'v>;
    forHash ha do k v: t := update k v t done;
    t);

{
    update,
    remove,
    maybeAt,
    contains?,
    at,
    count,
    forTable,
    create,
}

