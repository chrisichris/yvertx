/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module yeb.mvc.middleware;



import java.util: Locale, Date, Collection;

import yeti.lang: Fun, Struct;
import org.yeb:ValidationException, YebUtils;

load yeb.std;
load yeb.async;
load yeb.mvc.mvc;
load yeb.validation;

yvertx = load yeb.yvertx;

//HandlerAdapters



/**
 * Converts the request parameters to a struct. 
 * The parameters of the request are converted to a struct. Parametes starting
 * with 'num_' are converted to number values, witho "bool_" to boolean-values.
 * The 'num_' and 'bool_' values are stripped of the name.
 *
 * If the request has content-type "form-url-encoded" than the body is also
 * added to the parameters. If the content-type is "application/json/ then
 * the body is converted to a JsonObject and added as "body" to the struct.
 *
 * The resulting struct is set as values field on the request struct and
 * than the given route is called.
 *
 * The optional special parameter '_function' is set as functionName on to
 * the request-struct. It is not part of values struct.
 *
 * Arguments:
 * options - defaultValues and/or default funcitonName
 * route - route to call with the result
 */
requestToStruct opts nextHandler is 'o -> 'h -> route =
    (load yeb.validation;

    values = [:];
    var functionName = "";
    for opts \case of
        Defaults ha: insertHash values (ha is hash<string,list<string>>);
        DefaultFunction n: functionName := n;
    esac;

    do req res:
        import org.vertx.java.core.json:JsonObject,
                                        JsonArray;
        import org.vertx.java.core.eventbus:Message;
        
        readFormData req;

        insertHash values req.params;


        jo = new JsonObject();
        forHash values do k v:
            _ = if strStarts? k "num_" then
                name = strRight k 4;
                value = valiList strToNum (req.params[k]);
                if length value == 1 then
                    jo#putNumber(name, (head value) is number);
                else
                    ja = new JsonArray();
                    for value do v:
                        _ = ja#add(v);
                    done;
                    jo#putArray(name, ja);
                fi;
            elif strStarts? k "bool_" then
                name = strRight k 5;
                value = valiList strToBoolean (req.params[k]);
                if length value == 1 then
                    jo#putBoolean(name, head value);
                else
                    ja = new JsonArray();
                    for value do v:
                        _ = ja#add(v);
                    done;
                    jo#putArray(name, ja);
                fi;
            elif k == "_function" and
                length (req.params[k]) > 0 then
                functionName := head req.params[k];
            else
                name = k;
                value = req.params[k];
                if length value == 1 then
                    jo#putString(name, head value);
                else
                    ja = new JsonArray();
                    for value do v:
                        _ = ja#add(v);
                    done;
                    jo#putArray(name, ja);
                fi;
            fi;
        done;

        if "Content-Type" in req.headers
            and req.headers["Content-Type"] =~ "application/json" then
            //read the body and parse it as jons
            json = new JsonObject(fromUTF8 req.body);
            jo#putObject("body",json);
        fi;


        result = {functionName,
                values = yvertx.fromJS jo};
        nextHandler req result res;
        
   done); 

/**
 * creates a route which converts the request to struct using
 * the 'requestToStruc' function and than invoces a function on the given
 * structure according to the name with the value.
 */
jsonStructAdapter opts stru is 'a -> {jsonStru is boolean} -> route =
    (import yeti.lang:Fun;
    fnHash = (
        ret = [:];
        {fields, value} = case peekObject stru of
            Struct r: r;
            _ : failWith "this is not realy possible"
        esac;
        
        fields 
            |> filter do fin:
                fold do b n: b or (strStarts? fin n) done 
                    false 
                    ["get_", "put_", "post_", "delete_", "all_"]
            done
            |> (flip for) do n:
                case value n of
                Object ob: 
                    if (ob is ~Object) instanceof Fun then
                        ret[n] := (ob unsafely_as ~Fun)
                    fi;
                _ : ()
                esac;
            done;
        ret);
    
    requestToStruct opts do req {functionName, values} res:
        {method} = req;
        sname = (strLower method)^"_"^functionName;
        
        call fno = 
            (fn = (fno is ~Object) unsafely_as ('a -> 'b);
            js = fn values;
            js = js with {for_json = E()};
            res (writeJsonResponse (req as request) js));
             

        if sname in fnHash then
            call fnHash[sname];
        else
            sname = "all_"^functionName;
            if sname in fnHash then
                call fnHash[sname]
            else
               res continue; 
            fi
        fi;
        
    done);

/**
 * Loads a route from a module by name
lazyHandler moduleName  is string -> route =
   (var myHandler is (Some route | None () ) = none;
    loadHandler () = (
        cl = Thread#currentThread()#getContextClassLoader()#loadClass(moduleName);
        mod = cl#getMethod(
            "eval",() as ~Class[])#invoke(() as ~Object, () as ~Object[]);
        jmod = mod unsafely_as {route is route};
        h = jmod.route;
        myHandler := Some h;
        h;
    );
    if not ((load yeb.mvc.config).webDynamicReload?) then
        loadHandler();
    else
        do ctxt:
            ha = case myHandler of
                Some h: h;
                None _ : loadHandler ();
            esac;
            ha ctxt;
        done;
    fi);


_routerFact oldVhs = 
   (vhs = array [];
    {
        add route =
            push vhs route,
        
        pattern patternStr route =
            add (patternHandler patternStr route),
        
        regex regexI route = 
            add (regexHandler regexI route),

        convert regex route = 
            add ((regexHandler regex) (requestToStruct [] route)),  

        jsonStruct regex opts stru = 
            add (regexHandler (All regex) (jsonStructAdapter opts stru)),

        //lazy regex moduleName = 
        //    add ((regexHandler (All regex)) (lazyHandler moduleName)),

        newHandler () =
            runHandlers (vhs ++ oldVhs),

        newSubRouter () =
            _routerFact (vhs ++ oldVhs),
    });
*/    
/**
 * Creates a router. A router is used to handle different requests.
 *
 * ie to specify differen request handlings do:
 * :router = newRouter id;
 * :router.get "index" do req res: //handle get request done
 * :router.post "someform" do req res: //handle post request done
 * :router.add customHandler; //use to add a route which is always executed
 * :
 * :route = router.newHandler; //cunstructs an route for all the routes
 *
 * The router will than try to match any route in the order given and execute
 * the routefunction if it fits.
 *
 * Each route function must return either 
 * - Completed if the request was handled by this route and the async Request
 *   context can be closed 
 * - NotHandled "" if the reuqest is not handled by this route and the next 
 *   routes/routes should be tried to match
 * - Handling "" means that the right route was found but the async RequestContext
 *   is kept open for further processing by the route
 *
 * The router creates itself a route with .newHandler. This route can be used
 * directly in yebWebMain.route or can be given to another router (with .add)
 * 
 * The adapter parameter is a function whith transforms each given route to 
 * another route. This adapter can be used to filter each request 
 *
 * ie to make sure each request is of a certain locale and has a logged in user:
 * 
 */
 
//newRouter () = _routerFact [];


/**
 * Takes a yebroute and creates a vertx HttpHandler.
 * used to Brigde between Vertx http and yeb.
 */
yebHandlerToVertxHandler opts yebroute =
    (import org.vertx.java.core.http:HttpServerRequest;
    fileHandler = yvertx.serveStaticFileAtPath opts;
    do reqO:            
        yvertx.bodyHandler (reqO is ~HttpServerRequest) do buffer:
            
            req = {
                headers = yvertx.requestHeaders reqO,
                uri = reqO#uri,
                path = reqO#path,
                method = reqO#method,
                params = 
                    ret = [:];
                    forHash (yvertx.params reqO) do k v: ret[k]:=[v] done;
                    ret,
                body = buffer#getBytes(),
                resHeaders = [:],
            } is request;
            try
                (yebroute is route) req 
                    \case of
                    None ex:
                        reqO#response#statusCode := 404;
                        _ = reqO#response#end();
                        throw (ex is ~Exception);
                    Some res: 
                        if res.statusCode == continueStatusCode then
                            reqO#response#statusCode := 404;
                            _ = reqO#response#end();
                        elif res.statusCode == -2 then
                            path = res.headers["file"];
                            fileHandler path reqO;
                        else
                            reqO#response#statusCode := res.statusCode;
                            yvertx.putResponseHeaders reqO res.headers;
                            if not res.body == noneBody then
                                buffer = yvertx.newByteBuffer res.body;
                                reqO#response#putHeader("Content-Length", 
                                        string buffer#length());
                                reqO#response#write(buffer);
                            fi;
                            _ = reqO#response#end();
                        fi;
                    esac;
            catch Exception ex:
                reqO#response#statusCode := 404;
                _ = reqO#response#end();
                throw (ex is ~Exception);
            yrt;
        done
    done);

/**
 * Creates an  yebHandler which fans out to many vertx workers yebHandlers.
 * Takes a factory function which produdes routes and returns an
 * async function from which one yebroute can be gotten. This route will
 * fan out its request to the route produced by the factory function
 */
createRequestWorkers numberOfWorkers yebHandlerFactoryFn = 
    (load yeb.async;

    fibre = yvertx.newFibre();

    [1 .. numberOfWorkers]
    |>map' \(yvertx.newWorker 
        \(route is route = yebHandlerFactoryFn ();
        _ = fibre.register do {req,res}: route req res done;
        ))
    |>parallel 
    |>bind \(return do req res:
        fibre.send {req, res};
    done));

/**
 * Creates a VertxHttpHandler which bridges to a number of worker
 * yebHandlers
 */
createYebHttpServer timeOutMs httpOpts numberOfWorkers yebHandlerFactoryFn =
    (load yeb.async;

    createRequestWorkers numberOfWorkers yebHandlerFactoryFn
        |> bind (return . yebHandlerToVertxHandler httpOpts)
        |> await timeOutMs
        |> yvertx.createHttpServerWithHandler);

/*
requestToJson req = 
    {headers = (req is request).headers,
    uri = req.uri,
    path = req.path,
    method = req.method,
    params = req.params,
    resHeaders = req.resHeaders,
    body = req.body,
    for_json = E()};
    
requestToBusHandler bustarget req =
    (yvertx = load yvertx;
    jr = requestToJson req;
    yvertx.requestFromBus bustarget jr do r:
        res = case r of
        None ex:
            response req 404 [:] noneBody;
        Some m:
            response req
                (maybeDefined \200 isNumber m.statusCode)
                (maybeDefined \[:] id m.headers)
                (maybeDefined \noneBody id m.body);
        esac is response;
        (req is request).respond res;
    done);

requestFromBusHandler route msg =
    (b = msg.body;
    (route is route) {
        headers = maybeDefined \[:] id b.headers,
        uri = isString b.uri,
        path = isString b.path,
        method = isString b.method,
        params = maybeDefined \[:] id b.params,
        body = maybeDefined \noneBody id b.body,
        resHeaders = maybeDefined \[:] id b.resHeaders,
        respond res = msg.reply (Some  res)
        });
*/
(load yeb.mvc.mvc) with {


    requestToStruct,
    
    yebHandlerToVertxHandler, 
    createRequestWorkers,

    createYebHttpServer,
}

