/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module yeb.mvc.mvc;

import java.lang:Character,
                 Long;
import java.util:Locale;
import java.util.regex:Pattern;
import java.net:URLEncoder, 
            URLDecoder;

import yeb.ValidationException;

    

load yeb.std;
load yeb.async;
load yeb.validation;

typedef cookie = {
    name is string,
    comment is string,
    commentUrl is string,
    domain is string,
    maxage is number,
    path is string,
    secure is boolean,
    value is string,
};

typedef response = {
    statusCode is number,
    headers is hash<string,string>,
    body is ~byte[],
    for_json is E(),
};


typedef request = {
    headers is hash<string, string>,
    uri is string,
    path is string,
    method is string,
    body is ~byte[],
    params is hash<string,list<string>>,
    resHeaders is hash<string,string>,
};


typedef route = request -> asyncFunction<response>;


addEtag response = 
    (digest = messageByteDigest "MD5" response.body;
    response.header["Etag",digest];
    response);
    
noneBody = new byte[0];

continueStatusCode = -1;
continue is Some response = Some {
    statusCode = continueStatusCode,
    headers = [:],
    body = noneBody};

fileResponse fileName = 
    Some {statusCode = -2,
    headers = ["file" : fileName],
    body = noneBody};

request {method,uri,path,headers} =
    {
    headers,
    uri,
    path,
    method,
    body = noneBody,
    params = [:],
    resHeaders = [:],
    } is request;



cookie opts name value = 
    (var _comment = undef_str;
    var _commentUrl = undef_str;
    var _domain = undef_str;
    var _maxage = Long#MAX_VALUE;
    var _path = undef_str;
    var _secure = false;
    for opts do opt:
        case opt of
        Comment str: _comment := str;
        CommentUrl str : _commentUrl := str;
        Domain str : _domain := str;
        Maxage n : _maxage := n;
        Path str : _path := str;
        Secure b: _secure := b;
        esac;
    done;

    {
        name is string,
        value is string,
        comment = _comment,
        commentUrl = _commentUrl,
        domain = _domain,
        maxage = _maxage,
        path = _path,
        secure = _secure,
    } is cookie);


setCookies headers cookies =
    (import io.netty.handler.codec.http:ServerCookieEncoder,
                                               DefaultCookie;
    cls = cookies |> map do co:
        dc = new DefaultCookie((co is cookie).name, co.value);
        if defined? co.comment then
            dc#setComment(co.comment);
        fi;
        if defined? co.domain then
            dc#setDomain(co.domain);
        fi;
        if defined? co.commentUrl then
            dc#setCommentUrl(co.commentUrl)
        fi;
        if co.maxage != Long#MAX_VALUE then
            dc#setMaxAge(co.maxage)
        fi;
        if defined? co.path then
            dc#setPath(co.path)
        fi;
        dc#setSecure(co.secure);
        dc;
    done;
    str = ServerCookieEncoder#encode(array cls);
    //TODO: make headers use list string 
    //TODO: cookies native support
    headers["Set-Cookie"] := strJoin "; " (mapJavaList string str));

getCookies headers = 
    (import io.netty.handler.codec.http:CookieDecoder,
                                            Cookie;
    str = headers["Cookie"];                                        
    CookieDecoder#decode(str is string) 
    |> (unsafely_as ~java.util.Collection)
    |> mapJavaList do ob:
        co = (ob unsafely_as ~Cookie);
        ({name = co#getName(),
        value = co#getValue(),
        comment = co#getComment(),
        commentUrl = co#getCommentUrl(),
        domain = co#getDomain(),
        maxage = co#getMaxAge(),
        path = co#getPath(),
        secure = co#isSecure()} is cookie)
    done);

addCookie headers cookie =
    (cs = getCookies headers;
    ncs = filter (( != cookie.name) . (.name)) cs;
    setCookies headers (cookie :: ncs));

getCookie headers name =
    filter (( == name) . (.name)) (getCookies headers);



params name req =
    if name in ((req is request).params) then
        req.params[name];
    else
        [] is list<string>
    fi;

maybeParam name falseFn valiFn ctxt =
    (ls = params name ctxt;
    if empty? ls then
        valiFn (head ls);
    else
        falseFn ();
    fi);

param name ctx = 
   (ls = params name ctx;
   if not empty? ls then
       head ls;
    else
        failWithValidation 
            "No request-parameter for name \(name)" 
            "";
    fi);

addHeader name value req =
    (hs = (req is request).resHeaders;
    if name in hs then
        hs[name is string] := hs[name] ^","^ value;
    else
        hs[name] := value;
    fi);    
maybeHeader name req =
    if name in (req is request).headers then
        Some req.headers[name]
    else 
        none
    fi;

isAjax req = 
    case maybeHeader "X-Requested-With" req of
    None (): false;
    Some v: (strLower v) == "xmlhttprequest"
    esac;

escape text =
    (escapeT s =
         "&#\(Character#codePointAt(s[0] is string, 0));";
     strJoin '' (matchAll '[<>&"]' escapeT id "\(text)"));

//"   

response req statusCode headers body =
    {statusCode = statusCode, 
     headers = 
        (insertHash req.resHeaders headers;
        (req is request).resHeaders),
     body = body,
     for_json = E()} is response; 

    
writeRedirect path req = 
   response req 301 ["Location":path] noneBody;



writeStatusType status contentType content req =
    response  req status ["Content-Type":contentType^"; charset=utf-8"]
        (toUTF8bytes content);

write contentType content req =
    writeStatusType 200 contentType content req;

writeStatus status content req =
    writeStatusType status "text/plain" content req;

write401 msg = writeStatus 401 msg;
write500 msg = writeStatus 500 msg;

newWriter () =
    (import java.lang.StringBuilder;
    stb = new StringBuilder();
    {
        write str = stb#append(escape str),
        echo str = stb#append(str is string),
        stringBuilder = stb,
        get value () = string stb#toString()
    });

writeHtml content req =
    write "text/html" content req;

writeJsonResponse json req =
    write "application/json" (writeJson json) req;

cacheForSeconds seconds mustRevalidate res = 
    (headers = res.headers;
    if seconds > 0 then
        //HTTP1.0 header
        headers["Expires"]:= 
            string (System#currentTimeMillis() + (seconds * 1000));
        //HTTP1.1 header
        hv = 
            "max-age=\(seconds)\(if mustRevalidate then 
                                    ", must revalidate" else ""fi)";
        headers["Cache-Control"] := hv;
    else
        headers["Pragma"] := "no-cache";
        headers["Expires"] := "1";
        headers["Cache-Control"]:= "no-cache, no-store";
    fi);

//+++++++++++++++++++++++Utils ++++++++++++++++++++++++++++
_date_formatsTH = threadLocal do:
        import java.util:Locale,
                         Calendar,
                         TimeZone;
        import java.text:SimpleDateFormat;
        
        cal = Calendar#getInstance();
        cal#set(2000, Calendar#JANUARY, 1,0,0);
        createFormat pattern =
            (f = new SimpleDateFormat(pattern is string, Locale#US);
            f#setTimeZone(TimeZone#getTimeZone("GMT"));
            f#set2DigitYearStart(cal#getTime());
            f);

        formats = {
            rfc1123 = createFormat "EEE, dd MMM yyy HH:mm:ss zzz",
            rfc1036 = createFormat "EEEE, dd-MMM-yy HH:mm:ss zzz",
            asctime = createFormat "EEE MMM d HH:mm:ss yyyy"
        };
        formats;
    done;

parseHttpDate dateValue =
    (import java.text:ParseException;
    dateValue = if strStarts? dateValue "'" and strEnds? dateValue "'" then
            strSlice dateValue 1 ((strLength dateValue) - 1);
        else
            dateValue;
        fi;
    formats = _date_formatsTH.value;
    try
        Some (formats.asctime#parse(dateValue));
    catch ParseException ex:
        try
            Some (formats.rfc1036#parse(dateValue));
        catch ParseException ex:
            try
                Some (formats.rfc1123#parse(dateValue));
            catch ParseException ex:
                none
            yrt
        yrt
    yrt);

formatHttpDate date =
    (_date_formatsTH.value).rfc1123#format(date);


readBody req =
    if req.body == noneBody then
        ""
    else
        str = new String(req.body is ~byte[], "UTF-8");
        string str;
    fi;

parseQuery query =
    (ret = [:];
    _ = matchAll '([^&=]+)(=([^&=]*))?'
        do ar:
            name = urlDecode (ar[1]);
            value = urlDecode (ar[3]);
            ols = if not name in ret then [] else ret[name] fi;
            ret[name] := value :: ols;
            "";
        done
        id
        query;
    ret);

readFormData req =
    case maybeHeader "Content-Type" req of
    None (): ();
    Some v:
        if strStarts? v "application/x-www-form-urlencoded" then
            insertHash req.params (parseQuery (readBody req));
        else
            ()
        fi
    esac;

url strList = 
    (if empty? strList then
        ""
    else
        strb = new java.lang.StringBuilder();
        var hasQuestion = false;
        var isName = false;
        var isFirstName = false;
        for strList do str:
            if (not hasQuestion) then
                cut = strIndexOf str "?" 0;
                if cut == ((strLength str )- 1) then
                    if strb#length() > 0 then
                        strb#append("/")
                    fi;
                    strb#append(str);
                    hasQuestion := true;
                    isName := true;
                    isFirstName := true;
                elif cut == 0 then
                    strb#append(str);
                    if not (strEnds? str "=") then
                        strb#append("=");
                    fi;
                    hasQuestion := true;
                    isName := false;
                elif cut > 0 then
                    if strb#length() > 0 then
                        strb#append("/")
                    fi;
                    strb#append(str);
                    if not (strEnds? str "=") then
                        strb#append("=");
                    fi;
                    hasQuestion := true;
                    isName := false;
                else
                    if strb#length() > 0 then
                        strb#append("/")
                    fi;
                    strb#append(str);();
                fi
            else
                if isName then
                    if not isFirstName then strb#append("&"); fi;
                    strb#append(str);
                    strb#append("=");
                    isName := false;
                else
                    r = urlEncode str;
                    strb#append(r);
                    isName := true;
                fi
           fi
       done;
       strb#toString();
   fi);

urlParam str name value = 
    (hasQuestion = (strIndexOf str "?" 0) > -1;
    strb = new java.lang.StringBuilder(str);
    if hasQuestion then
        strb#append("&");
    else
        strb#append("?");
    fi;
    strb#append(name)#append("=")#append(urlEncode value);
    string strb);


ptag name params content 
        is string -> hash<string,string> -> list<string> -> string = 
    (var strb = new java.lang.StringBuilder();
    strb := strb#append("<")#append(escape name);
    forHash params do k v:
        strb := strb#append(" ")
            #append(escape k)
            #append('="')
            #append(escape v)
            #append('"');
    done;
    if empty? content then
        strb := strb#append("/>");
    else
        strb := strb#append(">")
            #append(strJoin "\n" content)
            #append("</")
            #append(name)
            #append(">");
    fi;
    strb#toString());

/*
oldFlashKey = "org.yeb.session.oldflash";
flashKey = "org.yeb.session.flash";

getFlash name req =
    (if oldFlashKey in (req is request).res.session then
        s = req.res.session[flashKey] unsafely_as hash<string,~Object>;
        if name in s then
            Some s[name];
        else
            none
        fi
    elif flashKey in req.res.session then
        s = req.res.session[flashKey] unsafely_as hash<string, ~Object>;
        if name in s then
            Some s[name];
        else
            none
        fi
    else
        none;
    fi);

setFlash name value req =
    (m = if flashKey in (req is request).res.session then
        (req.res.session[flashKey]) unsafely_as hash<string, ~Object>
    else
        r = [:];
        req.res.session[flashKey] := (r as ~Object);
        r
    fi;
    m[name] := value as ~Object);
*/


///////////////////////////////////////////////
//route things
_patternMatchAll = 
        matchAll '(/?\.?):([A-Za-z0-9]+)(\$([^\$]+)\$)?(\?)?' (Token . tail) Text;

/**
 * Transform an url pattern to a regex. Patterns are used in routers to 
 * specify path pattern which should be handled.
 *
 * ie for the pattern:
 * :/entry/:id/:date
 * becomes the regex
 * :/entry/([^/]+)/([^/]+)/(.*)
 * and the matched parts are exposed as request-parameters
 *
 * to specify a custom regex put it between $ $ after the name of the part.
 * ie to specify that id should only contain digits:
 * :/entry/:id$d+$
 */
patternToRegex pat = 
   (//:a-z is name
    //:a-z? is optional
    //* at end means rest
    //$marks start regex $ marks end regex
    
    import java.util.regex.Pattern;
    
    paS = if strEnds? pat "/*" then 
                    strLeft pat (strLength pat - 2)
               else
                    pat;
               fi;
               
    tokens = _patternMatchAll paS;
    
    
    reg = tokens
    |> map do x:
        case x of
        Token [leading, name, _, regex, mark]:
           (reg = if defined? regex and (strLength regex > 0) then 
                    regex;
                  else
                    '[^/\.]+'
                  fi;
            reg = "(?<\(name)>\(reg))";
            
            if defined? mark then
                if defined? leading then
                    "(?:\(Pattern#quote(leading))" ^ reg ^ ")?" ;
                else
                    reg ^ "?";
                fi;
            else
                if defined? leading then
                    Pattern#quote(leading) ^ reg
                else
                    reg;
                fi;
            fi);
        Text tx:
           (Pattern#quote(tx));
        _ : failWith "should not happen";
        esac
    done
    |> strJoin "";
    
    regex = if strEnds? pat "/*" then
        reg ^ '(?:/(?<rest>.*))?'
    else
        reg
    fi;
    regex);

_nameMatchAll = matchAll '\?\<([A-Za-z0-9]+)\>' 
                        (Some . ((flip at) 1)) None;     

_regexRoute method regex handler  = 
   (import java.util.regex.Pattern;
    meth = strUpper method;
    var checkMethod? = meth != "ALL";
    
    names = _nameMatchAll regex |> catSome;
    pattern = Pattern#compile(regex);

    do req res:
        if checkMethod? and (meth != (strUpper req.method )) then
            res continue;
        else
            matcher = pattern#matcher(req.path is string);
            if matcher#matches() then
                //add the paramters
                params = copy req.params;
                urlParams = array [];
                for [0..matcher#groupCount()] do c:
                    push urlParams matcher#group(c);
                done;
                params["urlPrams"] := list urlParams;
                
                //add the named parameters
                for names do name:
                    ls = if name in params then
                            params[name];
                         else
                            []
                         fi;
                    try
                        v = matcher#group(name);
                        if defined? v and strLength (string v) > 0 then
                            params[name] := v :: ls;
                        fi;
                    catch IllegalArgumentException ex:
                        println 
                            "matcher for regex \(regex) has not name \(name)";
                    yrt;        
                done;

                //set the new pathInfo and servletPath
                path = if (contains? "rest" names) 
                    and (defined? matcher#group("rest")) then
                    string matcher#group("rest");        
                else
                    ""
                fi;
                nreq = req with { params, path};

                try
                    handler nreq res
                catch ValidationException ex:
                    res continue;
                yrt;
            else
                res continue;
            fi;
        fi;
    done);

_methodPattern requestUrl = 
    case requestUrl of
    Get us: pair "GET" us;
    Post us: pair "POST" us;
    Put us: pair "PUT" us;
    Delete us: pair "DELETE" us;
    Options us: pair "OPTIONS" us;
    Head us: pair "HEAD" us;
    All us: pair "ALL" us;
    General {method, pattern} : pair method pattern;
    esac;


/**
 * Handleradapter which takes a request method and a regexpattern and 
 * executes on match the given route. 
 * Normally this is not used directly but a router is used.
 *
 */
regexRoute regex route =
    (pa = _methodPattern regex;
    _regexRoute pa.fst pa.snd route);

/**
 * Handleradapter which takes a request method and a pattern 
 * (see patternToRegex) and 
 * executes on match the given route. 
 * Normally this is not used directly but a router is used.
 */
patternRoute pattern route =
    (pa = _methodPattern pattern;
    _regexRoute pa.fst (patternToRegex pa.snd) route);

routes handlers req responder is list<route> -> route =
    if empty? handlers then
        responder continue;
    else
        try
        (head handlers) req \case of
            None ex: responder (None (ex is ~Exception));
            Some res:
                if res.statusCode == continueStatusCode then
                    routes (tail handlers) req responder;
                else
                    responder (Some res)
                fi
            esac;
        catch Exception ex:
            responder (None ex);
        yrt
    fi;



{

    patternToRegex,
    regexRoute,
    patternRoute,
    routes,

    (==>>) = patternRoute,
    (~~>>) = regexRoute,
    (==>) p h = patternRoute p do req res:
        try res (Some (h req)) catch Exception ex: res (None ex) yrt
    done,
    (~~>) p h = regexRoute p do req res:
        try res (Some (h req)) catch Exception ex: res (None ex) yrt
    done,

    (<==) fn res is (either<response> -> ()) -> response -> ()= 
        fn (Some res),

    HEADER_PRAGMA = "Pragma",
    HEADER_EXPIRES = "Expires",
    HEADER_CACHE_CONTROL = "Cache-Control",

    noneBody,
    fileResponse,

    addEtag,

    cookie,
    setCookies,
    getCookies,
    getCookie,
    addCookie,
    continue,
    continueStatusCode,
    request,
    response,
    params,
    param,
    maybeParam,

    addHeader,
    maybeHeader,


    isAjax,
    escape,

    writeRedirect,
    writeStatus,
    write500,
    write401,
    writeStatusType,
    write,
    newWriter,
    writeHtml,
    writeJsonResponse,
    
    cacheForSeconds,
    
    parseHttpDate,
    formatHttpDate,
    readBody,
    parseQuery,
    readFormData,
    url,
    urlParam,
    ptag,


    (@) text = escape text,

        
}
