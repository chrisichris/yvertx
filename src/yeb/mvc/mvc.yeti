/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module yeb.mvc.mvc;

import java.lang:Character,
                 Long;
import java.util:Locale;
import java.util.regex:Pattern;
import java.net:URLEncoder, 
            URLDecoder;

import yeb.ValidationException;

    

load yeb.std;
load yeb.promise;
util = load yeb.mvc.impl.util;

typedef cookie = {
    name is string,
    comment is string,
    commentUrl is string,
    domain is string,
    maxage is number,
    path is string,
    secure is boolean,
    value is string,
};

typedef response = {
    var statusCode is number,
    headers is hash<string,array<string>>,
    var body is ~byte[],
};


typedef request = {
    method is string,
    url is string,
    headers is hash<string, string>,
    body is ~byte[],
    mountPath is string,
    path is string,
    params is hash<string,list<string>>,
    queryParams is hash<string,list<string>>,
    bodyParams is hash<string, list<string>>,
    allParams is hash<string,list<string>>,
    cookies is hash<string,cookie>
};


typedef route = request -> promise<response>;

escape = util.escape;

/**
 * Group: send (RESPONSE)
 *
 * This function should be used to create the response struct
 * Creates a new response structure which can be sent to the response
 * handler.
 *
 * The headers hash of the response has a default set to an empty
 * array which is also added to the hash itself.
 *
 * Arguments:
 * statusCode - the http statuscode of the response
 * headers - the headers-hash of the response
 * body - the body of the response
 */
response statusCode headers body = 
    ({var statusCode = statusCode, 
     headers = 
        ha = [:] is hash<string,array<string>>;
        forHash headers do k v:
            ha[k] := array [v]
        done;
        setHashDefault ha do k:
            ar = array [];
            ha[k] := ar is array<string>;
            ar
        done;
        ha,
     var body = body} is response);

/**
 * Group: send
 *
 * Internal response object used to signal that the route-searching should
 * continue.
 *
 * The status-code of this response is -1. Some middleware will
 * check for this statuscode and handle the handling ovrer to another route
 */
continue is response = 
    response (-1) [:] util.noneBody;


/**
 * Group: send
 *
 * promise containing the continue response. Same as return continue
 */
continuePromise = return continue;    

/**
 * Group: request (REQUEST)
 *
 * Creates a new request. This function should be used to create a request.
 * The params, queryParams, bodyParams fields have a hash which defaults
 * to an empty list. 
 *
 * Arguments:
 * method - the http method in upper case
 * url - the url of the request (whtihout domain and scheme)
 * path - the path part of the url without query
 * headers - a map of headers 
 */
request {method,url,path,headers} =
    (
    params = listHash(); 
    queryParams = listHash(); 
    bodyParams = listHash(); 
    allParams = 
        (ha = [:];
        setHashDefault ha do k:
            if k in params then
                params[k];
            elif k in queryParams then
                queryParams[k];
            elif k in bodyParams then
                bodyParams[k]
            else
                []
            fi;
        done;
        ha);
    //stript off last slash
    path = if strEnds? path "/" then
            strLeft path (strLength path - 1);
        else
            path;
        fi;
    {
    method = strUpper method,
    url,
    headers,
    body = util.noneBody,
    mountPath = "",
    path,
    params,
    queryParams,
    bodyParams,
    allParams,
    cookies = [:]
    } is request);





    

/*
oldFlashKey = "org.yeb.session.oldflash";
flashKey = "org.yeb.session.flash";

getFlash name req =
    (if oldFlashKey in (req is request).res.session then
        s = req.res.session[flashKey] unsafely_as hash<string,~Object>;
        if name in s then
            Some s[name];
        else
            none
        fi
    elif flashKey in req.res.session then
        s = req.res.session[flashKey] unsafely_as hash<string, ~Object>;
        if name in s then
            Some s[name];
        else
            none
        fi
    else
        none;
    fi);

setFlash name value req =
    (m = if flashKey in (req is request).res.session then
        (req.res.session[flashKey]) unsafely_as hash<string, ~Object>
    else
        r = [:];
        req.res.session[flashKey] := (r as ~Object);
        r
    fi;
    m[name] := value as ~Object);
*/


///////////////////////////////////////////////
//route things
_patternMatchAll = 
        matchAll '(/?\.?):([A-Za-z0-9]+)(\$([^\$]+)\$)?(\?)?' (Token . tail) Text;

/**
 * Group: route (ROUTE)
 *
 * Transform an url pattern to a regex. Patterns are used in routers to 
 * specify path pattern which should be handled.
 *
 * ie for the pattern:
 * :/entry/:id/:date
 * becomes the regex
 * :/entry/([^/]+)/([^/]+)/(.*)
 * and the matched parts are exposed as request-parameters
 *
 * to specify a custom regex put it between $ $ after the name of the part.
 * ie to specify that id should only contain digits:
 * :/entry/:id$d+$
 *
 * Arguments:
 * pattern - the pattern string
 */
patternToRegex pat = 
   (//:a-z is name
    //:a-z? is optional
    //* at end means rest
    //$marks start regex $ marks end regex
    
    import java.util.regex.Pattern;
    
    paS = if strEnds? pat "/*" then 
                    strLeft pat (strLength pat - 2)
               else
                    pat;
               fi;
               
    tokens = _patternMatchAll paS;
    
    
    reg = tokens
    |> map do x:
        case x of
        Token [leading, name, _, regex, mark]:
           (reg = if defined? regex and (strLength regex > 0) then 
                    regex;
                  else
                    '[^/\.]+'
                  fi;
            reg = "(?<\(name)>\(reg))";
            
            if defined? mark then
                if defined? leading then
                    "(?:\(Pattern#quote(leading))" ^ reg ^ ")?" ;
                else
                    reg ^ "?";
                fi;
            else
                if defined? leading then
                    Pattern#quote(leading) ^ reg
                else
                    reg;
                fi;
            fi);
        Text tx:
           (Pattern#quote(tx));
        _ : failWith "should not happen";
        esac
    done
    |> strJoin "";
    
    regex = if strEnds? pat "/*" then
        reg ^ '(?:/(?<rest>.*))?'
    else
        reg
    fi;
    regex);

_nameMatchAll = matchAll '\?\<([A-Za-z0-9]+)\>' 
                        (Some . ((flip at) 1)) None;     

_regexRoute method regex handler is string -> string -> route -> route  = 
   (import java.util.regex.Pattern;
    meth = strUpper method;
    var checkMethod? = meth != "ALL";
    
    names = _nameMatchAll regex |> catSome;
    pattern = Pattern#compile(regex);

    do req:
        if checkMethod? and (meth != (strUpper req.method )) then
            continuePromise;
        else
            matcher = pattern#matcher(req.path is string);
            if matcher#matches() then
                //add the paramters
                params = copy req.params;
                setHashDefault params \([]);
                urlParams = array [];
                for [0..matcher#groupCount()] do c:
                    push urlParams matcher#group(c);
                done;
                params["__urlParams"] := list urlParams;
                
                //add the named parameters
                for names do name:
                    try
                        v = matcher#group(name);
                        if defined? v and strLength (string v) > 0 then
                            params[name] := v :: params[name];
                        fi;
                    catch IllegalArgumentException ex:
                        println 
                            "matcher for regex \(regex) has not name \(name)";
                    yrt;        
                done;

                nreq = req with { params};

                try
                    handler nreq;
                catch ValidationException ex:
                    continuePromise;
                yrt;
            else
                continuePromise;
            fi;
        fi;
    done);

/**
 * Group: route (ROUTE)
 *
 * Executes the given route if the path starts with the given 
 * mountPoint, with a new request. The mountPath of the new request is the
 * mountPoint and the new path is the part of the old path after the 
 * mountPoint.
 *
 * Arguments:
 * mountPoint - the prefix of the path which should match. It must end
 * with "/"
 *
 * It is used to add subroutes:
 * : routes [
 * :    mount "user/" routes [
 * :       Get "info" ==> do req: 
 * :               //will match path 'user/info'     
 * :               println req;
 * :               rs.html "...";
 * :        done;
 * :    ]
 * : ]
 * : // => {mountPath="user/",path="info"...} 
 *
 */
mount mountPrefix handler is string -> route -> route = 
    (if not strEnds? mountPrefix "/" then
        failWith "mount prefix must start with / but is \(mountPrefix)"
    fi;
    do req:
        if strStarts? req.path mountPrefix then
            nreq = req with {
                mountPath = req.mountPath^mountPrefix,
                path = strRight req.path (strLength mountPrefix)
            };
            handler nreq
        else
            return continue
        fi;
    done);

_methodPattern requestUrl = 
    case requestUrl of
    Get us: pair "GET" us;
    Post us: pair "POST" us;
    Put us: pair "PUT" us;
    Delete us: pair "DELETE" us;
    Options us: pair "OPTIONS" us;
    Head us: pair "HEAD" us;
    All us: pair "ALL" us;
    General {method, pattern} : pair method pattern;
    esac;


/**
 * Group: route
 *
 * Used to match a route based on a regexpattern. See also the shorthand
 * operators (~~>) and (~~>>)
 *
 * Arguments:
 * pathPattern - regexPattern in a Method variant which is used to match the
 * path
 * route - route to execute if the pattern machtes
 *
 * Description:
 * Middleware which takes a regex pattern in a method-variant and a route. 
 * The route is executed if the http-method matches the variant and the path
 * matches the regex.
 *
 * Named groups of the regex are added as request params and all regex-groups
 * are added as the __urlParams param.
 *
 * Example:
 * : regexRoute (Get 'user/(?id:\d+)') do req:
 * :    //will match any path 'user/<number>"
 * :    
 * :    println req.params["id"];
 * :    // => the id-number of the the user given in the path
 * :
 * :    return rs.html "..";
 * : done;
 * :
 *
 */
regexRoute regex route =
    (pa = _methodPattern regex;
    _regexRoute pa.fst pa.snd route);

/**
 * Group: route
 *
 * Used to match a route based on a path pattern. See also the shorthand
 * operators (==>) and (==>>)
 *
 * Arguments:
 * pathPattern - patter in a Method variant which is used to match the
 * path. The pattern transfered to a regex using the patternToRegex function.
 * route - route to execute if the pattern machtes
 *
 * Description:
 * Middleware which takes a pattern in a method-variant and a route. 
 * The route is executed if the http-method matches the variant and the path
 * matches the patter.
 *
 * Parameters of the pattern are added to the requests.params hash.
 *
 *
 * Example:
 * : patternRoute (Get 'user/:id') do req:
 * :    //will match any path 'user/<string>"
 * :    
 * :    println req.params["id"];
 * :    // => the id of the the user given in the path (any string)
 * :
 * :    return rs.html "..";
 * : done;
 * :
 *
 */
patternRoute pattern route =
    (pa = _methodPattern pattern;
    _regexRoute pa.fst (patternToRegex pa.snd) route);


/**
 * Group: route
 * Middleware which creates a route which trys one route ofter another out of 
 * a list of (sub)routes 
 * until the first subroute has handled the request.
 *
 * Arguments:
 * subroutes - list of routes to try. 
 *
 * If a soubroute does not handle a reuqest it should return the 'continue'
 * response or a response with status-code -1. If this is the case the 
 * middleware will hand over handling to the nex route.
 * 
 * Example:
 * : routes [
 * :    Get "user/:id" ==> ...,
 * :    Post "user/:id" ==> ...
 * : ]
 * Creates one route from many routes. The routes are executed
 * one ofter the other as long as they respons with status-code 
 * the internal status-code continue (= -1)
 */
routes handlersIn req is list<route> -> route =
    (var handlers = handlersIn;
    var cond = true;
    prom = promise();
    
    internalResponder = \case of
        None ex: prom.setValue (None (ex is ~Exception));
        Some res:
            if res.statusCode == continue.statusCode then
                cond := true;
            else
                cond := false;
                prom.setValue (Some res);
            fi
        esac;
    (cond and not empty? handlers) loop
        (handler = head handlers;
        handlers := tail handlers;
        
        //set cond to false and the handler can set it back to
        //true but only before it retursn on the same tick
        cond := false;
        try
            fulfill internalResponder (handler req) ;
        catch Exception ex:
            cond := false;
            prom.setValue (None ex);
        yrt);
    prom.promise);

/**
 * Group: middleware (MIDDLEWARE)
 *
 * Parses the query-string and (potential) body form data  and puts them
 * in the queryParams and bodyParams hash
 *
 * Arguments:
 * route - next route to call
 */
paramsMiddleware route req is route -> route =
    (//the query
    cut = strIndexOf req.url "?" 0;
    req = if cut >= 0 then
            req with {
                queryParams = parseQuery (strRight req.url cut)
            }
        else
            req
        fi;
    //the form data
    req = req with {
        bodyParams = util.readFormData req
    };

    route req);

/**
 * Group: middleware
 *
 * Parses cookies and puts them in the cookies field of the request
 * 
 * Arguments:
 * route - next route to call
*/
cookiesMiddleware route req is route -> route=
    (nreq = req with {
        cookies = util.parseCookies req
    };
    route nreq);


/**
 * Group: middleware
 *
 * Evaluates the given condition function for the request if it returns true
 * executes the route otherwise returns continue.
 *
 * Arguments:
 * conditionFn - function which gets evaluated for the request and returns
 * true or false to handle it
 * route - next route
 *
 * Example:
 * : routes [
 * :   Get "user/:id" ==>> 
 * :         (ifReq do req: req.params["id"] == "anon" done)
 * :         do req:
 * :             //handle anon user
 * :         done,
 * :   Get "user/:id" ==>> do req:
 * :         //handle other users
 * :   done
 * : ];
 */
ifReq fn route req is 'f -> route -> route=
    if fn req then
        route req 
    else
        continuePromise
    fi;

/**
 * Group: middleware
 *
 * calculates the etag and set the header
 * works on the response
 *
 * Arguments:
 * route - route to call and the response of which should be used for etag calc
 */
etagMiddleware route req =
    route req 
        |> bind do res:
            etag = messageByteDigest "MD5" res.body;
            case maybeAt None Some "If-None-Match" req.headers of
            None _: 
                res.headers["ETag"] := array [etag];
                return res;
            Some et:
                if et == etag then
                    return (response 304 [:] (toUTF8bytes "Not modified"))
                else
                    res.headers["ETag"] := array [etag];
                    return res;
                fi
            esac;
        done;
{
    /**
     * Group: route
     * Same as pattern pattenRoute function
     *
     * Arguments:
     * patter - the pattern to match
     * route - the function to execute
     */
    (==>>) = patternRoute,
    
    /**
     * Group: route
     * Same regesRoute function
     *
     * Arguments:
     * pattern - the regexpattern
     * route - the route
     */
    (~~>>) = regexRoute,
    
    /**
     * Group: route
     * 
     * Same as patternRoute but takes a function which returns a resposne.
     * The response is than wrapped in a promise. Used to code sync routes
     * which is fine if they do not block.
     *
     * Arguments:
     * pattern - pattern to mathc on the path
     * handler - a function which takes a request and returns a response
     */
    (==>) p h = patternRoute p do req:
        try return (h req) catch Exception ex: returnEither (None ex) yrt
    done,


    /**
     * Group: route
     * 
     * Same as regexRoute but takes a function which returns a resposne.
     * The response is than wrapped in a promise. Used to code sync routes
     * which is fine if they do not block.
     *
     * Arguments:
     * regexPattern - regex pattern to match on the path
     * handler - a function which takes a request and returns a response
     */
    (~~>) p h = regexRoute p do req:
        try returnEither (Some (h req)) catch 
            Exception ex: returnEither (None ex) yrt
    done,

    /**
     * Group: util (UTIL)
     *
     * Escapes the < > & html special chars
     *
     * Arguments:
     * text - text to escape
     */
    (@) text = escape text,

    noneBody = util.noneBody,
    response,
    continue,
    request,
    escape,
    patternToRegex,
    mount,
    regexRoute,
    patternRoute,
    routes,
    paramsMiddleware,
    cookiesMiddleware,
    ifReq,
    etagMiddleware
}
