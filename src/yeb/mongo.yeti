module yeb.mongo;

import java.lang:Number;
import yeti.lang: AList, Struct, Tag, ByKey,GenericStruct;
import com.mongodb: DBCollection, 
                    BasicDBObject, 
                    DBCursor, 
                    DBObject;
import java.util: Map, HashMap, List, Iterator;


load yeb.std;

typedef dbo<a> = {.for_mongo is a};

_fromDBO o = 
   (import java.util:List,HashMap,Map;
    
    if nullptr? (o is ~Object) then
         o;
    elif o instanceof Number then
        (number' o) as ~Object;
    elif o instanceof List then
        ((o unsafely_as ~List) |> mapJavaList (_fromDBO)) as ~Object;  
    elif o instanceof Map then
        ma = new HashMap();
        forJavaMap (o unsafely_as ~Map) do k v:
            value = _fromDBO v;
            if not nullptr? value then
                _ = ma#put(string k, value);
            fi;
        done;
        if o instanceof DBObject then
            ma#put("_yongo_dbobject", o);
        fi;
        new HashStruct(ma);
    else
        o
    fi);

fromDBO object is ~DBObject -> 'a =
    (_fromDBO (object as ~Object)) unsafely_as 'a;
 

emptyDBO = {for_mongo = E()};

_toDBO object = 
   (import yeti.lang:Num, FloatNum, RatNum,AList, ByKey, Struct, Tag;
    import java.util:ArrayList,Map;
    import com.mongodb:BasicDBObject;
   
    nullTag ob = 
        (o = ob as ~Object;
        if o instanceof Tag then
            t = o unsafely_as ~Tag;
            t#name == "E" and nullptr? t#value;
        else
            false
        fi);

    o = object as ~Object;
    if nullptr? o then
        o
    elif same? o (emptyDBO as ~Object) then
        new BasicDBObject()
    elif nullTag o then
        () as ~Object
    elif (o instanceof FloatNum) 
         or (o instanceof RatNum) then
        (o unsafely_as ~Num)#toBigDecimal();
    elif (o instanceof Num) then
        (o unsafely_as ~Num)#toBigInteger();
    elif o instanceof AList then
        jl = new ArrayList();
        for (o unsafely_as list<'a>) do v:
            if not nullTag v then
                _ = jl#add(_toDBO v);
            fi
        done;
        jl as ~Object;
    elif o instanceof ByKey then
        dbo = new BasicDBObject();
        i = (o unsafely_as ~Map)#entrySet()#iterator();
        i#hasNext() loop
            (e = i#next() unsafely_as ~java.util.Map$Entry;
             key = string (e#getKey());
             v = e#getValue();
             if (not nullTag v)
                 and (not strStarts? key "_yongo_") then
                dbo#append(key
                        , _toDBO v)
             fi);
        dbo;
    elif o instanceof Struct then
        st = o unsafely_as ~Struct;
        dbo = new BasicDBObject();
        for [0 .. st#count() - 1] do i:
            name = st#name(i);
            v = st#get(i);
            if (not nullTag v)
                and (not strStarts? name "_yongo_") then
                _ = dbo#append(name, _toDBO v);
            fi
        done;
        dbo;
    elif o instanceof Tag then
        t = o unsafely_as ~Tag;
        if t#name == "Some" then
            _toDBO (t#value unsafely_as 'a);
        elif t#name == "None" then
            () as ~Object;
        else
            dbo = new BasicDBObject();
            _ = dbo#put("_vtype",t#name);
            _ = dbo#put(t#name, _toDBO (t#value unsafely_as 'a));
            dbo;
        fi
    else
        o
    fi);
    
toDBO stru is dbo<'a>  -> ~DBObject =
    _toDBO (stru unsafely_as ~Object) unsafely_as ~DBObject;
            
            
dbRef db  namespace id =
    new com.mongodb.DBRef(db, namespace, id);

dbRefFromObject db  stru = 
    new com.mongodb.DBRef(db, stru._yongo_dboject);


toList cursor is ~DBCursor -> list<'a> = 
   (it = cursor#iterator();
    fn () = 
        if it#hasNext() then
            fromDBO (it#next() unsafely_as ~DBObject) :. fn;
        else
            []
        fi;
    fn ());

     
{
    toDBO,
    fromDBO,
    toList,
    dbRef,
    dbRefFromObject,
    emptyDBO,
    
}
