/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module yeb.promise;

import java.lang:Exception,
                RuntimException;

//callback functions
typedef either<a> = None ~Exception | Some a;
typedef opaque promise<a> = (either<a> -> ()) -> (); 

_idT r is ((either<'a> -> ()) -> ()) ->
       ((either<'a> -> ()) -> ()) =
        r;
//_create = (r as ((either<'a> -> ()) -> ()) -> promise<'a>);
_resolve is promise<'a> -> ((either<'a> -> ()) -> ()) 
    = (_idT as promise<'a> -> ((either<'a> -> ()) -> ()));


/**
 * Group: async
 * Fulfill the value of promise in the given function. If the promise
 * has the value than the function will be called with the value.
 * 
 * Arguments:
 * fn - the function which is given the Some value or None Exception
 * promise - the promise
 */
fulfill fn pro =
    (_resolve pro) fn;

/**
 * Group: async
 * Create a setable promise. The value can be set once with the value function
 */
valuePromise () =
    (var val = none;
    var listener = \();
    {
        setValue x = case val of
            None _ :
                val := Some x;
                listener x;
            Some v :
                failWith "Value already set";
            esac,
        promise = do cb:
            case val of
            None _ :
                ol = listener;
                listener :=  
                    do x: 
                        try ol x finally cb x yrt
                    done;
            Some v: cb v;
            esac
        done as promise<'a>
    });
                        

/**
 * Group: async (PROMISE)
 * Transforms a value in an promise
 *
 * Arguments:
 *  value - value to which the created function will pass in the reciever
 */
returnEither v is either<'a> -> promise<'a> = 
    (do cb: cb v done) as promise<'a>;

/**
 * Group: async (ASYNC)
 * Transforms a value in an promise which always return some. Same as
 * return (Some v)
 *
 * Arguments:
 *  value - value to which the created function will pass in the reciever
 */
return v is 'a -> promise<'a> =
    returnEither (Some v);

class AsyncException(String msg) extends RuntimeException
end;


/**
 * Group: async
 * crates a None with Excpetion
 */
failNone msg = 
    (import yeti.lang:FailureException;
    (None ((new FailureException(msg is string)) as ~Exception)));

/**
 * Group: async 
 * creates an AsyncException from a string
 */
returnFail msg = returnEither (failNone msg);

/**
 * Group: async
 * Joins two promises in sequenc, where the second function
 * is dependent on the result of the first.
 *
 * see also the (->) operator for a shorthand and exmples 
 *
 * Arguments:
 * mappingFunction - is given the value of the first promise and should
 * returns the second callback funcion
 * promise - the first callback function in the sequence
 */
bindEither fn promise
    is  (either<'a> -> promise<'b>) 
        -> promise<'a> -> promise<'b> =
    (ret = valuePromise ();
    promise |> fulfill do a:
        try 
            pron = fn a;
            pron |> fulfill ret.setValue;
        catch Exception ex:
            ret.setValue (None ex);
        yrt
    done;
    ret.promise);

/**
 * Group: async
 * Joins two promises in sequenc with the value, where the second function
 * is dependent on the result of the first.
 *
 * Differnt to bind the second function only gets the value of a positit Some
 * result of the callback. If there is a failure this is given further.
 *
 * see also the (->>) operator for a shorthand and exmples 
 *
 * Arguments:
 * mappingFunction - is given the value of the first promise and should
 * returns the second callback funcion
 * promise - the first callback function in the sequence
 */
bind fn promise
    is  ('a -> promise<'b>) 
        -> promise<'a> -> promise<'b> =
    promise |> bindEither \case of
        None msg: returnEither (None msg);
        Some a: fn a;
        esac;


/**
 * Group: async
 * Handles failure in an async functiond and returns a new one.
 *
 * Differnt to bind the second function only gets the failure. If the callback
 * receives a falid value it is passed further.
 *
 * see also the (-|>) operator for a shorthand and exmples 
 *
 * Arguments:
 * mappingFunction - is given the value of the first promise and should
 * returns the second callback funcion
 * promise - the first callback function in the sequence
 */
bindNone fn promise
    is  ( ~Exception -> promise<'b>) 
        -> promise<'a> -> promise<'b> =
    promise |> bindEither \case of
        None ex: fn ex;
        Some a: return a;
        esac;

/**
 * Group: async
 * Executes a sequence of promises in parallel and calls the callback 
 * with either a list of results or the first exception which occured
 *
 * Arguments:
 * asycnFunctions - the list of promises to execute
 * callback - the callbac function which gets called with the result
 */
parallel promises 
    is list?<promise<'a>> -> promise<list<'a>> =
    (ret = valuePromise ();
    res = array [];
    var handled = false;
    for promises do c:
        try
        c |> fulfill do r:
            finished = synchronized res \case r of
                None str: 
                    if not handled then
                        handled := true;
                        Some (None str);
                    else
                        none
                    fi;
                Some a:
                    if not handled then
                        push res a;
                        if length res == length promises then
                            handled := true;
                            Some (Some(list res));
                        else
                            none
                        fi
                    else
                        none
                    fi
                esac;
            case finished of
                None _ : ();
                Some arg : ret.setValue arg;
            esac;
        done;
        catch Exception ex:
            ret.setValue (None ex);
        yrt;
    done;
    ret.promise);


/**
 * Group: async
 * Only used inside a function given to 'cbColllect'. Executes the given
 * promise and returns a function containin the value
 *
 * For an example see cbCollect
 *
 * Arguments:
 * promise - the promise from which to take the value
 */
setAsync ctr promise is 'b -> promise<'a> -> (() -> 'a) =
    (ctr.starting();
    mutex = ctr.mutex;
    var hasReceived = false;
    var res = NotSet ();
    promise |> fulfill do r:
        call? = synchronized mutex \case r of
            None ex: 
                if not hasReceived then
                    res := Exception (ex is ~Exception);
                    hasReceived := true;
                    Some (None ex);
                else
                    none
                fi;
            Some a:
                if not hasReceived then
                    hasReceived := true;
                    res := Some a;
                    Some (Some ());
                else
                    none
                fi;
            esac;
        case call? of
        None _: ();
        Some arg: ctr.hasReceived arg;
        esac;
    done;
    \(case res of
        NotSet (): failWith "Not set";
        Exception ex: throw (ex is ~Exception);
        Some v: v
      esac));    

/**
 * Group: async
 * Used to collect the results promises which get executed in parrallel.
 *
 * Arguments:
 * prepareFunction - function to setup the promises to execute
 * callback - callback which receives the result of the prepare function
 * or the exception of the first not succesful result
 *
 */
collectAsync inex is ('b -> 'a) -> promise<'a>=
    (pro = valuePromise ();
     mutex = new Object();
     var called = false;
     var requests = 0;
     var received = 0;
     var result = none;
     ctr = {
        mutex,
        starting () = 
            synchronized mutex \(requests := requests + 1),

        hasReceived ex =
            (call? = synchronized mutex \case ex of
                None str :
                    called := true;
                    Some (None str);
                Some _ :
                    received := received + 1;
                    if not called then
                        case result of
                        None _ : none;
                        Some v: 
                            if received == requests then
                                called := true;
                                Some (Some v);
                            else
                                none
                            fi;
                        esac;
                    else
                        none
                    fi;
                esac;

            case call? of
            None _ : ();
            Some arg: pro.setValue arg
            esac),
    };
    try 
        r = inex ctr;
        call? = synchronized mutex 
            \(result := Some r;
            if not called and received == requests then
                called := true;
                Some (Some r);
            else 
                none
            fi);
        case call? of
        None _ : ();
        Some arg: pro.setValue arg;
        esac;
            
    catch Exception ex:
        call? = synchronized mutex 
            \(if not called then
                called := true;
                Some (None ex);
            else
                none
            fi);
        case call? of 
        None _: ();
        Some arg: pro.setValue arg;
        esac;
    yrt;
    pro.promise);

//run stru = (stru.f1 ()) \();



{
    //callback functions
    valuePromise,
    fulfill,
    failNone,
    return,
    returnEither,
    returnFail,
    bind,
    bindEither,
    bindNone,
    parallel,
    setAsync,
    collectAsync,
}
