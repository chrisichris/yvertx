/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module yeb.promise;

import java.lang:Exception,
                RuntimException;

//callback functions
typedef either<a> = None ~Exception | Some a;
typedef opaque promise<a> = (either<a> -> ()) -> (); 

_idT r is ((either<'a> -> ()) -> ()) ->
       ((either<'a> -> ()) -> ()) =
        r;
//_create = _idT as ((either<'a> -> ()) -> ()) -> promise<'a>;
_resolve = (_idT as promise<'a> -> ((either<'a> -> ()) -> ()));


/**
 * Group: fulfill (FULFILL)
 * Fulfill the value of promise in the given function. If the promise
 * has the value than the function will be called with the value.
 * 
 * Arguments:
 * fn - the function which is given the Some value or None Exception
 * promise - the promise
 */
fulfill fn pro is (either<'a> -> ()) -> promise<'a> -> ()=
    (_resolve pro) fn;

_nilListener = \();
/**
 * Group: new (CONSTRUCT)
 * Create a setable promise. 
 *
 * Retruns a struct with a function (setValue) to set the promise value
 * and a field with the promise 
 * The value can be set once with the value function
 */
promise () =
    (var val = None _nilListener;
    mutex = new Object();
    {
        /**
         * set promise value. The value first set will always be the value of
         * the promise. If therey are already registered listeners
         * on the promise than these will be called. If not
         * than 
         */
        setValue x = 
            fn = synchronized mutex do:
                case val of
                None l :
                    val := Some x;
                    l;

                Some v :
                    _nilListener;
                esac
            done;
            fn x;
            (),
        /**
         * the promise. 
         */
        promise cb = 
            fn = synchronized mutex do:
                case val of
                None ol :
                    val := None 
                        do x: 
                            try ol x finally cb x yrt
                        done;
                    _nilListener;
                Some v: \(cb v);
                esac
            done;
            fn (),
    } as {
        setValue is either<'a> -> (),
        promise is promise<'a>
    });
                        

/**
 * Group: new
 * Takes an async function and creates a promise of it
 *
 * Arguments:
 * asyncFn - async function
 */
toEitherPromise fn is ((either<'a> -> ()) -> ()) -> promise<'a> =
    (prom = promise();
    fn prom.setValue;
    prom.promise);

/**
 * Group: new
 * Takes an async function and creates a promise of it. Wrapping the value
 * in Some
 *
 * Arguments:
 * asyncFn - asnyc function
 */
toPromise fn is (('a -> ()) -> ()) -> promise<'a> =
    (prom = promise ();
    fn (prom.setValue . Some);
    prom.promise);


/**
 * Group: new
 * Transforms a value in an promise. The promise will always evaluate to the
 * given value.
 *
 * Arguments:
 *  value - the value of the promise
 */
returnEither v is either<'a> -> promise<'a> = 
    (do cb: cb v done) as promise<'a>;

/**
 * Group: new
 * Transforms a value in an promise which always evalutes to Some value. 
 * Same as returnEither (Some v)
 *
 * Arguments:
 *  value - value 
 */
return v is 'a -> promise<'a> =
    returnEither (Some v);

class AsyncException(String msg) extends RuntimeException
end;


/**
 * Group: new
 * returns none with a FailureException with the given string.
 */
failNone msg = 
    (import yeti.lang:FailureException;
    (None ((new FailureException(msg is string)) as ~Exception)));

/**
 * Group: new 
 * 
 * creates a promise which always evaluates to the None with the given string
 * in a failure excpeiont
 */
returnFail msg = returnEither (failNone msg);

/**
 * Group: bind (BINDING)
 * Maps the either value of one promise to another promise using the given 
 * mapping function
 *
 * Arguments:
 * mappingFunction - is given the value of the promise and should
 * returns promise returned by this function
 * promise - the promise which should be mapped
 */
bindEither fn prom
    is  (either<'a> -> promise<'b>) 
        -> promise<'a> -> promise<'b> =
    (ret = promise ();
    fulfill do a:
        try 
            pron = fn a;
            fulfill ret.setValue pron;
        catch Exception ex:
            ret.setValue (None ex);
        yrt
        done
        prom;
    ret.promise);

/**
 * Group: bind
 * Maps the success (Some) value of one promise to another promise 
 * using the given mapping function.
 *
 * If the value of the original promise is None (ex) then this is transferred
 * directly further to the resulting promise.
 *
 * Arguments:
 * mappingFunction - is given the value of the promise and should
 * returns promise returned by this function
 * promise - the promise which should be mapped
 *
 */
bind fn prom
    is  ('a -> promise<'b>) 
        -> promise<'a> -> promise<'b> =
    (ret = promise();
    fulfill \case of
        None msg: ret.setValue (None (msg is ~Exception));
        Some v:
            try
                pron = fn v;
                fulfill ret.setValue pron
            catch Exception ex:
                ret.setValue (None ex);
            yrt
        esac
        prom;
    ret.promise);


/**
 * Group: async
 * Maps a failed promise.
 *
 * If the promise value is None the map function is called with the exception.
 * Otherwise the value is given directly further.
 *
 * Differnt to bind the second function only gets the failure. If the callback
 * receives a falid value it is passed further.
 *
 * see also the (-|>) operator for a shorthand and exmples 
 *
 * Arguments:
 * mappingFunction - is given the value of the first promise and should
 * returns the second callback funcion
 * promise - the first callback function in the sequence
 */
bindNone fn promise
    is  ( ~Exception -> promise<'b>) 
        -> promise<'a> -> promise<'b> =
    promise |> bindEither \case of
        None ex: fn ex;
        Some a: return a;
        esac;

/**
 * Group: parallel (PARALLEL)
 * Executes a sequence of promises in parallel and calls the callback 
 * with either a list of results or the first exception which occured
 *
 * Arguments:
 * promises - the list of promises to execute
 * callback - the callbac function which gets called with the result
 */
parallel promises 
    is list?<promise<'a>> -> promise<list<'a>> =
    (ret = promise ();
    res = array [];
    var handled = false;
    for promises do c:
        try
        c |> fulfill do r:
            finished = synchronized res \case r of
                None str: 
                    if not handled then
                        handled := true;
                        Some (None str);
                    else
                        none
                    fi;
                Some a:
                    if not handled then
                        push res a;
                        if length res == length promises then
                            handled := true;
                            Some (Some(list res));
                        else
                            none
                        fi
                    else
                        none
                    fi
                esac;
            case finished of
                None _ : ();
                Some arg : ret.setValue arg;
            esac;
        done;
        catch Exception ex:
            ret.setValue (None ex);
        yrt;
    done;
    ret.promise);

typedef opaque promiseCollector = {
    mutex is ~Object,
    starting is () -> (),
    hasReceived is Ex ~Exception | Value () -> ()
};

_promiseCollectorUnwrap = id as promiseCollector -> { 
                            mutex is ~Object,
                            starting is () -> (),
                            hasReceived is Ex ~Exception | Value () -> ()
                        };

/**
 * Group: parallel
 * Only used inside a function given to 'colllectPromises'. Executes the given
 * promise and returns a function containin the value
 *
 * For an example see cbCollect
 *
 * Arguments:
 * collector - given by 'collectPromises' to the prepareFunction 
 * promise - the promise from which to take the value
 */
setProm ctri promise is 'b -> promise<'a> -> (() -> 'a) =
    (ctr = _promiseCollectorUnwrap ctri;
    /*
    ctr = (ctri is promiseCollector) as { 
                            mutex is ~Object,
                            starting is () -> (),
                            hasReceived is Ex ~Exception | Value () -> ()
                        };*/
    ctr.starting();
    var res = NotSet ();
    promise |> fulfill do r:
        v = synchronized ctr.mutex \case r of
            None ex: 
                res := Exception (ex is ~Exception);
                Ex ex;
            Some a:
                res := Some a;
                Value ();
            esac;
        ctr.hasReceived v;
    done;
    do:
        case res of
        NotSet (): failWith "must be set";
        Exception ex: throw (ex is ~Exception);
        Some v: v
        esac
    done);    



/**
 * Group: parallel
 * Used to collect the results promises which get executed in parrallel.
 *
 * Arguments:
 * prepareFunction - function to setup the promises to execute
 * callback - callback which receives the result of the prepare function
 * or the exception of the first not succesful result
 *
 */
collectPromises inex is ('b -> 'a) -> promise<'a>=
    (pro = promise ();
     mutex = new Object();
     var requests = 0;
     var received = 0;
     var result = none;
     ctr = {
        mutex,
        starting () = 
            synchronized mutex \(requests := requests + 1),

        hasReceived opt =
            (call? = synchronized mutex \case opt of
                Ex ex :
                    Yes (None ex);
                Value () :
                    received := received + 1;
                    case result of
                    None _ : No ();
                    Some v: 
                        if received == requests then
                            Yes (Some v);
                        else
                            No ()
                        fi;
                    esac;
                esac;

            case call? of
            No _ : ();
            Yes arg: pro.setValue arg
            esac),
    } as promiseCollector;
    try 
        r = inex ctr;
        call? = synchronized mutex 
            \(result := Some r;
            if received == requests then
                Yes (Some r);
            else 
                No ()
            fi);
        case call? of
        No () : ();
        Yes arg: pro.setValue arg;
        esac;
            
    catch Exception ex:
        pro.setValue (None ex);
    yrt;
    pro.promise);

//run stru = (stru.f1 ()) \();



{
    /**
     * Group: bind
     * Same as the bind function but takes the promise as first argument
     * Can be used to chain promises
     *
     * Example:
     * : (return 1) >>= do n: return "number \(n)" done;
     *
     * Arguments:
     * promise - the promise to map
     * fn - the mapping function
     */
    (>>=) p fn = bind fn p,
    
    /**
     * Group: bind
     * Same as bind but as operator used to do multibinding
     *
     * Example:
     * : {
     * :    f = f1 <- return 1,
     * :    f1 n = f2 n <- return 2,
     * :    f2 n1 n2 = return (n1 + n2)
     * : }.f >>= println
     *
     * Arguments:
     * fn - mapping function
     * promise - the promise to map
     */
    (<-) fn p = bind fn p,
    
    /**
     * Group: fulfill
     *
     * Extracts the value of apromis by giving it to a function (when it is
     * ready)
     *
     * Example:
     * : promise >>- \case of 
     * :     Some v: println "Success: \(v)";
     * :     None ex: prinntln "Failure \(ex)";
     * : esac;
     *
     * Arguments:
     * callbackFn - functino called with the value
     */
    (>>-) p fn = fulfill fn p,

    //callback functions
    promise,
    toEitherPromise,
    toPromise,
    fulfill,
    failNone,
    return,
    returnEither,
    returnFail,
    bind,
    bindEither,
    bindNone,
    parallel,
    setProm,
    collectPromises,
}
