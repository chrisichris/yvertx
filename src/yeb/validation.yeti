/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module yeb.validation;

import java.lang:String,IllegalArgumentException;
import java.util.regex:Pattern;
import java.text:NumberFormat, DecimalFormat, DateFormat, SimpleDateFormat;
import java.util: Locale, Date, List,ArrayList, Collections;
import java.net: URLEncoder, URLDecoder;


load yeb.std; 

/**
 * Group: misc (MISC)
 *
 * Creates a ValidationException and throws it
 *
 * Arguments:
 * - msg : the message of the exception
 * - value : the value which failed to validate
 *
 */
failWithValidation msg value =
    throw new ValidationException(msg is string, value unsafely_as ~Object);

/**
 * Group: misc
 *
 * Creates a ValdationException but does not throw it
 *
 * Arguments:
 * - msg : the message of the exception
 * - value : the value which did not validate
 */
newValidationException msg value =
    new ValidationException(msg is string, value unsafely_as ~Object);

/**
 * Group: misc
 *
 * Fails with a ValidationException. Works like fail in yeb.std
 * but throw a ValidationException
 *
 * Arguments:
 * - obj: obj to fail (see yeb.std.fail for details)
 */
failVali x = 
    (import java.lang.Throwable;
    import yeti.lang.Tag;
    ob = x unsafely_as ~Object;
    ob =if not defined? x then
            ("" unsafely_as ~Object)
        elif ob instanceof Tag then
            t = (ob unsafely_as ~Tag);
            if t#name == "None" or t#name == "none" then
                t#value
            else
                ob
            fi
        else
            ob
        fi;

    if ob instanceof Throwable then
        throw (ob unsafely_as ~Throwable);
    else 
        failWithValidation "Failure Value: [\(ob)]" ob;
    fi);

/**
 * Group: misc
 *
 * Executes the validatonFn with the given value. If an ValidationException
 * is thrown by teh validationFn then the notValidFn is called with the
 * ex. If the validation passes the valueFn is called with the value
 *
 * Arguments:
 * - notValidFn : function called when validation fails with the caught 
 *   exception
 * - valueFn : function called with the value when validation is 
 *   succesful
 * - validationFn : the validation function. It is given the value
 * - value: the value to validate.
 */
maybeValid notValidFn valueFn validFn value =
    try
        v = validFn value;
        valueFn v;
    catch ValidationException ex:
        notValidFn ex;
    yrt;
        
/**
 * Group: vali (VALIDATOR)
 *
 * Utility to create a validtor using a function which checks whether the
 * value is valid.
 *
 * Example:
 * 
 * : //check number whether it is even
 * : evenValidator = valiCheck ((== 0) . (% 2))
 * : evenNumber = evenValidator 2;
 *
 * Arguments:
 * - fn: function which gets the value and return true if it is valid
 *   of false if the value is not valid
 * - value : the value to validate
 */
valiCheck fun value =
    if fun value then
        value;
    else
        failWithValidation "wrong vaue" value;
    fi;

/**
 * Group: vali
 *
 * Validates the min and max length of a list
 *
 * Arguments:
 * min - min length
 * max - max length
 * ls - list to validate
 */
valiListLength min max listIn is number -> number -> list<'a> -> list<'a>= 
    (l = length listIn;
    if l < min then
        failWithValidation  
            "list length must be minimal \(min) but is \(l)" 
            listIn;
    elif (max > 0) and (l > max) then
        failWithValidation  
            "list length must be maximal \(max) but is \(l)" listIn; 
    else
        listIn
    fi);

/**
 * Group: vali
 *
 * Validate a number
 *
 * Arguments:
 *
 * - min : min value
 * - max : max value
 * - nume : the numer to validate
 */
valiNum min max num =
    if num > max then
        failWithValidation  
            "number must be max \(max) but is \(num)" num;
    elif (num is number) < (min is number) then
        failWithValidation
            "number must be min \(min) but is \(num)" num;
    else
        num
    fi;

/**
 * Group: vali
 *
 * Filter the list to contain only values which are valid. 
 *
 * Arguments:
 * - validatorFn : the validatorFn which is applied to each element
 * - ls : the list to validate
 */
valiList vali listIn = 
    listIn |> map (maybeValid \none Some vali)
        |> catSome;

/**
 * Group: vali
 *
 * Validates the length of a string
 *
 * Arguments:
 * - min : min length
 * - max : max length
 * - str : the string to validate
 */
valiString min max str = 
        if (strLength str) > max then
            failWithValidation
                ("string [\(str)] is \(strLength str) long but should "
                ^"be max \(max) long")
                str;
        elif (strLength str) < min then
            failWithValidation
                ("string [\(str)] is only \(strLength str) long but should "
                ^"be at least \(min) long")
                str;
        else
            str
        fi;

/**
 * Group: vali
 *
 * Validates a string based on a regex
 *
 * Arguments:
 * - regexPattern : the regex-pattern to apply to the string
 * - str : the string to validate
 */
valiRegex regexPattern str =
    if str =~ regexPattern then
      str
    else
        failWithValidation
            "string \(str) does not match pattern \(regexPattern)" 
            str;
    fi;

/**
 * Group: parse (PARSE)
 *
 * Parses a string to a number. Same as yeti.lang.str.number but throws
 * an ValidationException
 */
_number str = 
    try 
        number str;
    catch Exception ex:
        failWithValidation "string \(str) is no number" str;
    yrt;

numberFormat formatOpt =
    case formatOpt of
        Format f: f;
        Pattern s: (
             f=NumberFormat#getInstance();
             if f instanceof DecimalFormat then
                df = (f unsafely_as ~DecimalFormat);
                df#applyPattern(s);
             fi;
             f);
        PatternLoc {pattern,loc}: (
             f=NumberFormat#getInstance(loc);
             if f instanceof DecimalFormat then
                df = (f unsafely_as ~DecimalFormat);
                df#applyPattern(pattern);
             fi;
             f);
        Default (): NumberFormat#getInstance();
    esac;

/**
 * Group: parse
 *
 * Parses a string to a number using the given NumberFormat or function
 */
parseNum formatOpt str is 'a -> string -> number=
    try
        case formatOpt of
        Format f: (numberFormat (Format f))#parse(str)#doubleValue();
        Pattern f: (numberFormat (Pattern f))#parse(str)#doubleValue();
        PatternLoc f: (numberFormat (PatternLoc f))#parse(str)#doubleValue();
        Default (): (numberFormat (Default ()))#parse(str)#doubleValue();
        None () : number str;
        Some fn : fn str;
        esac
    catch Exception e:
        failWithValidation "\(str) is no number" str;
    yrt;

/**
 * Group: format (FORMAT)
 *
 * Formats a number to a string given the provided NumberFormat
 */
formatNum formatOpt num =
    case formatOpt of
    Format f: (numberFormat (Format f))#format(num);
    Pattern f: (numberFormat (Pattern f))#format(num);
    PatternLoc f: (numberFormat (PatternLoc f))#format(num);
    Default f: (numberFormat (Default f))#format(num);
    None () : string num;
    Some fn : fn num;
    esac;

dateFormat formatOpt = 
     case formatOpt of
        Format f: f;
        Pattern s: (new SimpleDateFormat(s)) as ~DateFormat; 
        PatternLoc {pattern,loc}:
           (new SimpleDateFormat(pattern as ~java.lang.String,
                                (loc as ~Locale))) as ~DateFormat;
        Default () : DateFormat#getDateInstance();
     esac;

/**
 * Group: parse
 *
 * Parses a string to a date using the format
 */
parseDate formatOpt str =
    try
        case formatOpt of
        Format f: (dateFormat (Format f))#parse(str);
        Pattern f: (dateFormat (Pattern f))#parse(str);
        PatternLoc f: (dateFormat (PatternLoc f))#parse(str);
        Default () : (dateFormat (Default ()))#parse(str);
        None (): new Date(number str);
        Some fn: fn str;
        esac
    catch Exception ex:
        failWithValidation "\(str) id no date" str;
    yrt;

/**
 * Group: format
 *
 * Formats a date to a string
 */
formatDate formatOpt date =
    case formatOpt of
    Format f: (dateFormat (Format f))#format(date);
    Pattern f: (dateFormat (Pattern f))#format(date);
    PatternLoc f: (dateFormat (PatternLoc f))#format(date);
    Default () : (dateFormat (Default ()))#format(date);
    None (): string date;
    Some fn: fn date;
    esac;

/**
 * Group: parse
 *
 * Parses a string to a boolean. If the string is case insensitive "true"
 * then returns true otherwise always false
 */
toBool str is string -> boolean=
    if (strLower str) == "true" then true else false fi;

{
    failWithValidation,
    newValidationException,
    fail = failVali,
    maybe = maybeValid,
    check = valiCheck,
    length = valiListLength, 
    list = valiList,
    string = valiString,
    regex = valiRegex, 
    num = valiNum,
    number = _number,
    parseNum,
    formatNum,
    parseDate,
    formatDate,
    toBool,

}
