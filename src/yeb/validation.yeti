/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module yeb.validation;

import java.lang:String,IllegalArgumentException;
import java.util.regex:Pattern;
import java.text:NumberFormat, DecimalFormat, DateFormat, SimpleDateFormat;
import java.util: Locale, Date, List,ArrayList, Collections;
import java.net: URLEncoder, URLDecoder;


load yeb.std; 

failWithValidation msg value =
    throw new ValidationException(msg, value unsafely_as ~Object);

newValidationException msg value =
    new ValidationException(msg, value unsafely_as ~Object);

validOr notValid validFn value =
    try
        validFn value;
    catch MessageException ex:
        notValid ();
    yrt;


maybeValid notValidFn valueFn validFn value =
    try
        v = validFn value;
        valueFn v;
    catch MessageException ex:
        notValidFn ex;
    yrt;
        


valiCheck fun value =
    if fun value then
        value;
    else
        failWithValidation 
            (message "wrong_value" "wrong vaue %1$s" [obj value]) value;
    fi;

valiMsg fun value = 
    case fun value of
    None _ : value;
    Some msg : 
       (mg is ~Message = msg;
        failWithValidation mg value);
    esac;

valiListLength min max listIn is number -> number -> list<'a> -> list<'a>= 
    (l = length listIn;
    if l < min then
        failWithValidation(message "listtooshort" 
            "list length must be minimal %1$s but is %2$s" 
                [obj length, obj min]) listIn;
    elif (max > 0) and (l > max) then
        failWithValidation(message "listtoolong" 
            "list length must be maximal %1$s but is %2$s" 
                [obj length, obj min]) listIn;
    else
        listIn
    fi);

valiNum min max num =
    if num > max then
        failWithValidation (message "numtoohigh" 
            "number must be max %1$s but is %2$s" [obj max, obj min]) num;
    elif (num is number) < (min is number) then
        failWithValidation(message "numtoolow" 
            "number must be min %1$s but is %2$s" [obj min, obj min]) num;
    else
        num
    fi;


valiList vali listIn = 
    listIn |> map (maybeValid \none Some vali)
        |> catSome;

valiString min max str = 
        if (strLength str) > max then
            failWithValidation
                (message "stringtoolong"
                "string %1$s is %2$n long but should be max %3$n long"
                        [obj str,obj (strLength str), obj max])
                str

        elif (strLength str) < min then
            failWithValidation
                (message "stringtooschort" 
                "string %1$s is only %2$n long but should be at least %3$n long"
                     [obj str,obj (strLength str), obj min])
                str
        else
            str
        fi;



valiRegex regexPattern str =
    if str =~ regexPattern then
      str
    else
        failWithValidation(message "stringpattern" 
            "string %1$s does not match pattern %2$s" 
            [obj str, obj regexPattern]) str;
    fi;

strToNum str = 
    try 
        number str;
    catch Exception ex:
        failWithValidation(message "numpattern" 
                            "string %1$s is no number" [obj str]) str;
    yrt;

numberFormat formatOpt =
    case formatOpt of
        Format f: f;
        Pattern s: (
             f=NumberFormat#getInstance();
             if f instanceof DecimalFormat then
                df = (f unsafely_as ~DecimalFormat);
                df#applyPattern(s);
             fi;
             f);
        PatternLoc {pattern,loc}: (
             f=NumberFormat#getInstance(loc);
             if f instanceof DecimalFormat then
                df = (f unsafely_as ~DecimalFormat);
                df#applyPattern(pattern);
             fi;
             f);
        None (): NumberFormat#getInstance();
    esac;

strFormatedToNum formatOpt str is 'a -> string -> number=
    try
        format = numberFormat formatOpt;
        format#parse(str)#doubleValue()
    catch Exception e:
        failWithValidation (message "nonum" "%1$s is no number" [obj str]) str;
    yrt;

numToFormatedStr formatOpt num =
    (numberFormat formatOpt)#format(num);

strNumberToDate str =
      try
          new Date(number str)
      catch java.lang.Exception ex:
          failWithValidation (message "nonum" "%1$s is no number" 
                                [obj str]) str;
      yrt;

dateToNumberStr date is ~Date -> string = string date#getTime();

dateFormat formatOpt = 
     case formatOpt of
        Format f: f;
        Pattern s: (new SimpleDateFormat(s)) as ~DateFormat; 
        PatternLoc {pattern,loc}:
           (new SimpleDateFormat(pattern as ~java.lang.String,
                                (loc as ~Locale))) as ~DateFormat;
        None _ : DateFormat#getDateInstance();
     esac;
     
strToBoolean str is string -> boolean=
    if (strLower str) == "true" then true else false fi;

{
    failWithValidation,
    newValidationException,
    validOr, 
    maybeValid,

    

    valiListLength, 
    valiList,

    valiString,
    valiRegex, 
    valiNum,

    valiCheck, 
    valiMsg,

    strToNum,

    numberFormat, 
    strFormatedToNum,
    numToFormatedStr,
    strNumberToDate, 
    dateToNumberStr, 
    dateFormat, 
    strToBoolean

}
