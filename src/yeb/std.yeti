/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module yeb.std;

import java.lang: String, Thread, ThreadLocal, 
                  	ClassLoader, StringBuilder, Throwable;
import java.util: Locale, Iterator,List,ListIterator;

import yeti.lang.Struct;
import java.io: File;
import org.slf4j: Logger, LoggerFactory;

json = load yeb.yvertx.json;


typedef jsonValue<a> = {
    str is Some string | None (),
    num is Some number | None (),
    bool is Some boolean | None (),
    arr is list<jsonValue>,
    obj is hash<string,jsonValue>,
    bytes is Some ~byte[] | None (),
    type is number,
    jsonStruct is a
};


class ValidationException(String message, Object wrongValue) 
    extends IllegalArgumentException(message)
    Object getWrongValue() wrongValue,
end;

/**
 * Group: convert (CONVERTERS)
 *
 * converts any ~Object to a number. The function never fails
 * if the value can not be converted to number NaN is returned. 
 * java.lang.Number are converted 
 * to a number, a string is tried to convert to number oterwise to NaN is
 * returned.
 *
 * arguments:
 * - value: value to convert to a number
 */
number' oi is 'a -> number = 
   (import java.lang: Double, Float,Number;
    import java.math: BigInteger, BigDecimal;
    import yeti.lang:Num,BigNum,IntNum,FloatNum;
    o = oi unsafely_as ~Object;
    o2 = if (o instanceof Double) or
             (o instanceof Float) or
             (o instanceof BigDecimal)
             then
                nu = o unsafely_as ~Number;
                new FloatNum(nu#doubleValue());
        elif o instanceof BigInteger then
            nu = o unsafely_as ~BigInteger;
            new BigNum(nu);
        elif o instanceof Num then
            o unsafely_as ~Num;
        elif o instanceof Number then
            nu = o unsafely_as ~Number;
            new IntNum(nu#longValue());
        elif o instanceof String then
            try 
                (number (o unsafely_as ~String)) unsafely_as ~Object
            catch Exception ex:
                o
            yrt
        else        
            o
        fi;
    if o2 instanceof Num then o2 unsafely_as number else Double#NaN fi);


/**
 * Group: convert 
 *
 * checks wheter a number is Double#NaN
 */
nan? x = Double#isNaN(x is number);    

/**
 * Group: convert
 * Converst any value to a boolean. If the value is a boolean true
 * or a not empty string or an positiv number than the value is true
 * otherwise false
 */
boolean x is 'a -> boolean =
    (import java.lang.Number;
    o = x unsafely_as ~Object;
    if o instanceof Boolean then
        (o unsafely_as ~Boolean)#booleanValue();
    elif defined? x
           or (nullptr? x)
           or ((o instanceof String) 
                and ((o unsafely_as ~String)#length() == 0)) 
           or ((o instanceof Number) 
               and ((o unsafely_as ~Number)#intValue() == 0))
            then 
        false
    else 
        true
    fi);

/**
 * Group: helper (HELPER)
 *
 * executes a functions with a threadlocal. Sets the given value
 * on the threadLocal and sets the orginal value back on the trheadLocal
 * when the function returns
 *
 * argumments:
 * - threadLocal: the threadLocal
 * - value: the value to set on the threadLocal during function execution
 * - fn: function to execute
 */
withThreadLocal threadLocal newValue ac = 
   (oldV = threadLocal.value;
    threadLocal.value := newValue;
    try
        ac ();
    finally
        threadLocal.value := oldV;
    yrt);

	

/**
 * Group: maybe (MAYBE)
 * execute noFn if the given list is empty oterh fn with the first element 
 * of the list
 *
 * arguments:
 * - noFn: executed when list is empty
 * - fn: executed with the first element of the list when the list is not
 *   empty
 * - ls: the list
 */
maybeHead noHead headF li =
    if empty? li then (noHead ()) else headF (head li) fi;


/**
 * Group: maybe 
 * execute noFn if the given key is not in the hash other wise fn with the 
 * value at the key
 *
 * arguments:
 * - noFn: executed when key not in hash
 * - fn: executed with the value at key when value in hash
 * - key: key to lookup in hash
 * - hash: the hash
 */
maybeAt  noValue valueF k hs =
    if k in hs then valueF (hs[k]) else (noValue k) fi;

/**
 * Group: test (TEST)
 *
 * check wheter the list starts with the list
 *
 * arguments:
 * - prefix: the prefix to check for
 * - ls: the list to check wheter it starts with the prefix
 */
listStarts? start l =
    if empty? start then
        true
    elif empty? l then
        false
    elif (head start) != (head l) then
        false
    else
        listStarts? (tail start) (tail l)
    fi;


/**
 * Group: maybe
 *
 * Executes noFn if vaue is None or fn if value is Some
 *
 * arguments:
 * - noFn: fn to execute when value is None
 * - fn: fn to execute when value is Some
 * - value: None or Some
 */
maybe' defaultFn fn opt =
    case opt of
    None x: defaultFn x;
    Some v: fn v;
    esac;

/**
 * Group: helper (HELPER)
 *
 * reads in a code file and extracts the the lines given at the linenumber
 *
 * arguments:
 * - sourceDirs: the srouce-directories to search
 * - fileName: the fileName of the code file (with suffix)
 * - lineNumber: the lineNumber to extract
 * - lineSourround: the number of lines which sourround the lineNumber
 */
findCodeAtLine sourceDirs fileName lineNumber linesSourround =
    (srcs = sourceDirs 
        |> concatMap do d: 
            f =new File(d is string, fileName is string);
            if f#exists() then
                [string f#getPath()]
            else
                []
            fi
        done;

    if empty? srcs then
       none
    else
        fromLineNumber = 
          (max 0 (lineNumber - linesSourround)) + 1;
        
        lines = readFile (head srcs) '' getLines
            |> drop (fromLineNumber - 1)
            |> take (2 *linesSourround);
        
        Some {
            fileName,
            lines,
            lineNumber,
            fromLineNumber,
            toLineNumber = fromLineNumber + linesSourround
        }
    fi);


/**
 * Group: helper
 *
 * First invocation of the function takes the current system time.
 * Invaocation of the resulting function returns the milliseconds passed
 *
 * Example:
 * :
 * : //first invocation remembers current time
 * : tr = timer ();
 * : // after ie 1200 ms call tr
 * : tr ();
 * : // => 1200 //returns the time passed between creation and call
 * :
 * : //after another 1000 ms call again 
 * : tr ();
 * : // => 2200 //the total time alpsed since creation
 * : 
 */
timer () =
    (start = System#currentTimeMillis();
    do:
        System#currentTimeMillis() - start
    done);

class YebAssertionError(String reason) 
    extends java.lang.AssertionError(reason,() as ~Throwable)
end;

assert msg bo =
    if not bo then
        msg = if not defined? msg or msg == "" then
            " "
        else
            msg
        fi;
        throw new YebAssertionError(msg is string);
    fi;

assertEquals test right =
    if right != test then
        throw new 
            YebAssertionError("Expected \(right) but was \(test)");
    fi;

simpleTest exit? println testHash =
   (var bad = 0;
    var exception = 0;

    var count = 0;
    println "TAP version 13";
    println "1..\(length testHash)";
    
    forHash testHash do name f:
        count := count + 1;
        tr = timer ();
        try
            
            f();
            println "ok \(count) - \(name) [\((tr())/1000) s] ";
        catch YebAssertionError ex:

            //extract linke number
            import java.lang.StackTraceElement;
            var ster = () as ~StackTraceElement;
            for ex#getStackTrace() do ste:
                if nullptr? ster and 
                    not strStarts? ste#getClassName() "yeb.std" then
                    ster := ste
                fi
            done;
            //print out
            println ("not ok \(count) - \(name) [\((tr())/1000) s] "
                    ^"because [\(ex#getMessage())] at [\(ster)]");

            bad := bad + 1;
        catch Throwable ex:
            println "not ok \(count) - \(name) [\((tr())/1000) s] \n\(ex)";
            import java.io:StringWriter, PrintWriter;
            sw = new StringWriter();
            pw = new PrintWriter(sw);
            ex#printStackTrace(pw);
            println (string ex);
            exception := exception + 1;
        yrt
        
    done;

    total = length testHash;
    if bad == 0 and exception == 0 then
        println "Testing done, \(total) OK.";
        0  
    else
        println ("FAILURE: Testing done, \(exception) exceptions, "
        ^ "\(bad) failed, \(total - bad - exception) ok of total \(total)");
        if exit? then
            _ = System#exit(-1);
        fi;
        (-1)
    fi);

//json things

/**
 * Group: json (JSON)
 *
 * Outputs a struct as as jso string
 */
writeJson stru = string (json.toJson stru);

/**
 * Group: json
 *
 * Parses a json string
 */
parseJson str is string -> jsonValue<'a> = 
    (import org.vertx.java.core.json:JsonObject;
    ob = new JsonObject(str is string);
    json.fromJson ob);


/**
 * Group: digest (DIGEST)
 * calculates the hash for the given algorithm for the given bytes
 * using java.security.MessageDigest
 *
 * Arguments:
 * algorithm - the algorithm to use
 * bytes - the message over which the hash sould be mad
 */
messageByteDigest algorithm message =
    YebUtils#calcDigest(algorithm is string, message is ~byte[]);

/**
 * Group: digest
 * calculates the hash for the given algorithm for the given messagen
 * using java.security.MessageDigest
 *
 * Arguments:
 * algorithm - the algorithm to use
 * message - the message-string over which the hash sould be mad
 */
messageDigest algorithm message =
    messageByteDigest algorithm ((message is string) as ~String)#getBytes(); 

{      
    assert,
    assertEquals,
    messageDigest, 

    messageByteDigest,

    /**
     * Group: digest
     * MD5 hash using messageDigest function
     */
    hashMD5 = messageDigest "MD5",
    
    /**
     * Group: digest
     * SHA-1 hash using messageDigest function
     */
    hashSHA1 = messageDigest "SHA-1",

    /**
     * Group: digest
     * SHA-256 hash using messageDigest function
     */
    hashSHA256 = messageDigest "SHA-256",

    /**
     * Group: helper
     *
     * The Development, Production or Test mode of the current runtime.
     *
     * The mode is set with the System-Property 'yvertx.mode'.
     * A value of 'test' maps to Test mode and of 'production'
     * to production. A dot seperated string after the mod is given as
     * value to the mode ie 'test.integration' maps to mode 
     * (Test "integration")
     */
    mode = 
       (v is Production string 
                  | Development string
                  | Test string =
            (prop = System#getProperty("yvertx.mode", "development");
            var main = "";
            var ext = "";
            cut = strIndexOf prop "." 0;
            if cut < 0 then
                main := prop;
                ext := "";
            else
                main := strLeft prop cut;
                ext := strRight prop (cut + 1);
            fi;
            case strLower main of
            "production":Production ext;
            "test": Test ext;
            _ : Development ext;            
            esac);
        {
            value = v,
            production? = case v of Production _ : true; _ : false esac,
            test? = case v of Test _ : true; _ : false esac,
            development? = case v of Development _ : true; _ : false esac,
        }),
    
    /**
     * Group: helper
     *
     * returns a logger for the given name
     */
    getLogger name is string -> ~Logger = LoggerFactory#getLogger(name),

    maybeHead,
    maybeAt,
    maybe',

    /**
     * Group: convert
     * converts the string to a bytearray encoded as UTF-8
     */
    toUTF8bytes str = 
        ((str is string) unsafely_as ~String)#getBytes("UTF-8"),

    /**
     * Group: convert
     * converts the given byte-array as string with Charste UTF-8
     */
    fromUTF8bytes bytes = 
        (new String(bytes is ~byte[], "UTF-8")) as string,

    /**
     * Group: convert
     * url encodes the given string UTF-8
     */
    urlEncode value =
        (import java.net.URLEncoder;
        URLEncoder#encode(value is string, "UTF-8")),

    /**
     * Group: convert
     * url decodes the given string UTF-8
     */
    urlDecode value =
        (import java.net.URLDecoder;
        URLDecoder#decode(value, "UTF-8")),
   
    /**
     * Group: convert
     * converts bytes to a base64 string
     */
    toBase64 bytes =
        (import javax.xml.bind.DatatypeConverter;
        DatatypeConverter#printBase64Binary(bytes is ~byte[]) as string),

    /**
     * Group: convert
     * converts a base64 string to an byte[]
     */
    fromBase64 str =
        (import javax.xml.bind.DatatypeConverter;
        DatatypeConverter#parseBase64Binary(str is string)),

    /**
     * Group: helper
     * creates a hash of lists which also returns as default value an empty
     * list
     */
    listHash () = 
        (ha = [:];
        setHashDefault ha \([]);
        ha),

    /**
     * Group: convert
     * parses a url query-string in a listHash
     */
    parseQuery query =
        (ret = listHash ();
        _ = matchAll '([^&=]+)(=([^&=]*))?'
            do ar:
                name = urlDecode (ar[1]);
                value = urlDecode (ar[3]);
                ols = if not name in ret then [] else ret[name] fi;
                ret[name] := value :: ols;
                "";
            done
            id
            query;
        ret),
    /**
     * Group: maybe 
     * if the value is defined execute right function esl wrong function
     *
     * Arguments:
     * wrongFn - invoked with unit if not defined
     * rightFn - invoked with value if value is defined
     * value - the value which is defined or not
     */
    maybeDefined wrongFn rightFn value =
        if defined? value then rightFn value else wrongFn () fi,

    /**
     * Group: maybe
     * if the value is defined return Some (fn value) else none
     *
     * Arguments:
     * fn - the function to execute with the value if defined
     * value - the value which is defined or not
     */
    onDefined fn v = if defined? v then Some (fn v) else none fi,
   
    
   
   /**
    * Group: json 
    * if the value is a string than the rightFunction is called other
    * wise the wrongFunction is called with the value (which is no string)
    *
    * arguments:
    * - wrongFunction: called when the value is no string
    * - rightFunction: called when the value is a string
    * - value: value to test
    */
   maybeString ffn rfn x = 
       if defined? x and (x as ~Object) instanceof String then
           rfn (string x);
       else
           ffn x
       fi,
   
   /**
    * Group: json 
    * if the value is a number than the rightFunction is called other
    * wise the wrongFunction is called with the value (which is no number)
    *
    * arguments:
    * - wrongFunction: called when the value is no number
    * - rightFunction: called when the value is a number
    * - value: value to test
    */
   maybeNumber ffn rfn x = 
       (import java.lang.Number;
       if defined? x and (x as ~Object) instanceof Number then
           rfn (number' (x as ~Object));
       else
           ffn x
       fi),

   /**
    * Group: json 
    * if the value is a boolean than the rightFunction is called other
    * wise the wrongFunction is called with the value (which is no boolean)
    *
    * arguments:
    * - wrongFunction: called when the value is no boolean
    * - rightFunction: called when the value is a boolean
    * - value: value to test
    */
   maybeBoolean ffn rfn x = 
       if defined? x and (x as ~Object) instanceof Boolean then
           rfn ((x as ~Object) unsafely_as  boolean);
       else
           ffn x
       fi,


    
    withThreadLocal,

    
    listStarts?,

    number',
    boolean,
    nan?,
    simpleTest,

    /**
     * Group: convert
     * casts value to ~Object
     *
     * same as unsafely_as ~Object
     *
     * Arguments:
     * value - value to cast
     */
    obj x = x unsafely_as ~Object,

    /**
     * Group: helper
     * 
     * throws an exception. Throw can not be used as function, therefore
     * this function is a replacment. It just throws the given exception.
     */
    throwEx ex = throw (ex is ~Exception),

    /**
     * Group: helper
     *
     * calls failWith with the given value. 
     * If the value is a None Variant extracts the value from None. If the
     * value (either the original one or the one extracted from None) is 
     * an Throwable throws it. Otherwise calls failtWith with the value 
     * toString
     */
    fail x = 
        (import java.lang.Throwable;
        import yeti.lang.Tag;
        ob = x unsafely_as ~Object;
        ob =if not defined? x then
                ("" unsafely_as ~Object)
            elif ob instanceof Tag then
                t = (ob unsafely_as ~Tag);
                if t#name == "None" or t#name == "none" then
                    t#value
                else
                    ob
                fi
            else
                ob
            fi;

        if ob instanceof Throwable then
            throw (ob unsafely_as ~Throwable);
        else 
            failWith "Failure Value: [\(ob)]";
        fi),

    /**
     * Group: test
     *
     * Generates an lazy list of random numbers
     */
    randomList () = (
        import java.util.Random;
        ran = new Random();
        f () = ran#nextFloat()  :. f;
        f();
    ),
    
    /**
     * Group: test
     *
     * Generates a byte array of the given length with random values
     */
    randomByteArray len = YebUtils#generateRandomByteArray(len is number),
    
    /**
     * Group: test
     *
     * Generates a a random String of givenlength
     */
    randomString len = YebUtils#randomUnicodeString(len is number),
    
    /**
     * Group: test
     *
     * Generates a random Alpha-String of given length
     */
    randomAlphaString len = YebUtils#randomAlphaString(len is number),


    findCodeAtLine,

    writeJson,
    parseJson,


}
