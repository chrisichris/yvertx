/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module yeb.std;

import java.lang: String, Thread, ThreadLocal, 
                  	ClassLoader, StringBuilder, Throwable;
import java.util: Locale, Iterator,List,ListIterator;

import yeti.lang.Struct;
import java.io: File;
//import org.yeb.TMap;
import org.slf4j: Logger, LoggerFactory;

json = load yvertx.json;


class Message(String key, String defaultFormat, Object[] params) 
    
    message = String#format(defaultFormat, params),

    String getDefaultFormat() defaultFormat,
    String getKey() key,
    String getMessage() message,
    Object[] getParams() params,
    String getLocalMessage(Locale loc) 
        String#format(loc,defaultFormat,params),
    String toString() message,
end;

class MessageException(Message messageObject) 
    extends IllegalArgumentException(messageObject#getMessage()) 
    Message getMessageObject() messageObject,
    static MessageException create(Message msg)
        new MessageException( msg),
end;

class ValidationException(Message message, Object wrongValue) 
    extends MessageException(message)
    Object getWrongValue() wrongValue,
    static ValidationException create(Message msg, Object wV)
        new ValidationException(msg, wV),
end;


message key defaultFormat values =
    new Message(key, defaultFormat, array values);

plainMessage text = message "" text [];

failWithMessage msg = throw new MessageException(msg);

number' o is ~Object -> number = 
   (import java.lang: Double, Float,Number;
    import java.math: BigInteger, BigDecimal;
    import yeti.lang:Num,BigNum,IntNum,FloatNum;
    o2 = if (o instanceof Double) or
             (o instanceof Float) or
             (o instanceof BigDecimal)
             then
                nu = o unsafely_as ~Number;
                new FloatNum(nu#doubleValue());
        elif o instanceof BigInteger then
            nu = o unsafely_as ~BigInteger;
            new BigNum(nu);
        elif o instanceof Num then
            o unsafely_as ~Num;
        elif o instanceof Number then
            nu = o unsafely_as ~Number;
            new IntNum(nu#longValue());
        else o
        fi;
    if o2 instanceof Num then o2 unsafely_as number else Double#NaN fi);

nan? x = Double#isNaN(x is number);    
    
boolean x is 'a -> boolean =
    (import java.lang.Number;
    o = x unsafely_as ~Object;
    if o instanceof Boolean then
        (o unsafely_as ~Boolean)#booleanValue();
    elif defined? x
           or (nullptr? x)
           or ((o instanceof String) 
                and ((o unsafely_as ~String)#length() == 0)) 
           or ((o instanceof Number) 
               and ((o unsafely_as ~Number)#intValue() == 0))
            then 
        false
    else 
        true
    fi);

withThreadLocal threadLocal newValue ac = 
   (oldV = threadLocal.value;
    threadLocal.value := newValue;
    try
        ac ();
    finally
        threadLocal.value := oldV;
    yrt);

	



maybeHead noHead headF li =
    if empty? li then (noHead ()) else headF (head li) fi;

maybeAt noValue valueF k hs =
    if k in hs then valueF (hs.[k]) else (noValue k) fi;

listStarts? start l =
    if empty? start then
        true
    elif empty? l then
        false
    elif (head start) != (head l) then
        false
    else
        listStarts? (tail start) (tail l)
    fi;


maybeDefined defaultFn valueFn x =
    if defined? x then valueFn x else defaultFn () fi;

maybe' defaultFn fn opt =
    case opt of
    None x: defaultFn x;
    Some v: fn v;
    esac;

findCodeAtLine sourceDirs fileName lineNumber linesSourround =
   (prov = (load yeb.yeticlassloadermodule).sourceReader 
                    sourceDirs false
                    none;
    arg = {
        var name = fileName, 
        fullpath = false
    };
    code = prov arg;
    if not defined? code then
        none
    else
        fromLineNumber = 
          (max 0 (lineNumber - linesSourround)) + 1;
        toLineNumber = lineNumber + linesSourround;
        lines = list (strSplit '\n' code)
            |> drop (fromLineNumber - 1)
            |> take (2 *linesSourround);
        Some {fileName,
        lines,
        lineNumber,
        fromLineNumber,
        toLineNumber}
    fi);
        
                        

simpleTest testHash ()=
   (var bad = 0;

    forHash testHash do name f:
        if not (f ()) then
            println "\(name) failed.";
            bad := bad + 1
        fi
    done;

    total = length testHash;
    if bad == 0 then
        "Testing done, \(total - bad)/\(total) OK."
    else
        "FAILURE: Testing done, \(total - bad)/\(total) OK."
    fi);

//json things
toJson stru = string (json.toJS stru);
fromJson str = 
    (import org.vertx.java.core.json:JsonObject;
    ob = new JsonObject(str is string);
    json.fromJS ob);

//+++++++++++++++++++++++table things ++++++++++++++++++++++++++++++++

typedef tableType<k,v> = {
   .add is k -> v -> tableType,
   .remove is k -> tableType,
   .valAt is k -> (None() | Some(v)),
   .count is number,
   .seq is () -> list<{key is k, value is v}>,
   .getDefault is 'k -> 'v -> 'v,
}

addAll table ha is tableType<'k,'v> -> hash<'k,'v> -> tableType<'k,'v>= 
    (var t = table;
    forHash ha do k v: t := (t.add k v) done;
    t);


create hash is hash<'k, 'v> -> tableType<'k,'v> = 
   (newTable pm is ~TMap -> tableType<'k,'v>  = 
       ({
          add k v is 'k -> 'v -> tableType<'k,'v> = newTable (pm#update(k,v)),

          remove k is 'k -> tableType<'k,'v> = newTable (pm#remove(k)),

          valAt k is 'k -> (None() | Some 'v) = (
            v = pm#get(k, TMap#NULL_VALUE);
            if same? v TMap#NULL_VALUE then None() else Some (v unsafely_as 'v)  fi
          ),

          getDefault key defaultV is 'k -> 'v -> 'v = (
            vr = pm#get(key,defaultV);
            vr unsafely_as 'v
          ),


          count is number= pm#size(),

          seq ()  = (
            r = pm#keyValueList();
            r unsafely_as list<{key is 'k ,value is 'v}>;
          ),
        } //unsafely_as tableType<'k,'v>
    );
    t = newTable TMap#EMPTY;
    if empty? hash then
        t;
    else 
       addAll t hash
    fi);


{       

    enviroment = 
       (var v is Production string 
                  | Development string
                  | Test string = Development "default";
        {
            set value vb = v := vb,
            get value () = v,
            production? = case v of Production _ : true; _ : false esac,
            test? = case v of Test _ : true; _ : false esac,
            development? = case v of Development _ : true; _ : false esac,
        }),
    
    getLogger name is string -> ~Logger = LoggerFactory#getLogger(name),

    (>>) fn1 fn2 = composeToRight fn1 fn2,
    

    message,
    plainMessage,
    failWithMessage,

    composeToRight fn1 fn2 = do a: fn2 (fn1 a) done,
    maybeHead,
    maybeAt,
    maybe',

    /**
     * Group: string
     * converts the string to a bytearray encoded as UTF-8
     */
    toUTF8 str = 
        ((str is string) unsafely_as ~String)#getBytes("UTF-8"),

    /**
     * Group: string
     * converts the given byte-array as string with Charste UTF-8
     */
    fromUTF8 bytes = 
        (new String(bytes is ~byte[], "UTF-8")) as string,
    /**
     * Group: helper (Various helpers)
     * if the value is defined execute right function esl wrong function
     *
     * Arguments:
     * wrongFn - invoked with unit if not defined
     * rightFn - invoked with value if value is defined
     * value - the value which is defined or not
     */
    maybeDefined wrongFn rightFn value =
        if defined? value then rightFn value else wrongFn () fi,

    /**
     * Group: helper
     * if the value is defined return Some (fn value) else none
     *
     * Arguments:
     * fn - the function to execute with the value if defined
     * value - the value which is defined or not
     */
    onDefined fn v = if defined? v then Some (fn v) else none fi,
    
    /**
     * Group: json (Helpers for json)
     * makes sure that the value is a string (and checks that at runtime)
     */
    isString x = x ^ "",
    
    /**
     * Group: json
     * makes sure hat the value is a number (and checks taht at runtime)
     */
    isNumber x = x + 0,
    
    /** 
     * Group: json
     * makes sure that the value is a boolean (and checks that at runtime)
     */
    isBoolean x = if x then x else x fi,
    
    withThreadLocal,


    listStarts?,

    number',
    boolean,
    nan?,
    simpleTest,

    /**
     * Group: helper
     * casts value to ~Object
     *
     * same as unsafely_as ~Object
     *
     * Arguments:
     * value - value to cast
     */
    obj x = x unsafely_as ~Object,

    randomList () = (
        import java.util.Random;
        ran = new Random();
        f () = ran#nextFloat()  :. f;
        f();
    ),

    regexPattern patstr =
       (import java.util.regex.Pattern;
        Pattern#compile(patstr)),

    findCodeAtLine,

    toJson,
    fromJson,

    tableCreate = create,
    tableAddAll = addAll,
    tableRemoveAll table keys =
        fold do t k: tableRemove t k done table keys,

    tableAdd table k v is tableType<'k,'v> -> 'k -> 'v -> tableType<'k,'v>=
        table.add k v,

    tableRemove table k is tableType<'k,'v> -> 'k -> tableType<'k,'v> =
        table.remove k,

    tableAt table k is tableType<'k,'v> -> 'k -> (None() | Some('v)) =
        table.valAt k,

    tableLength table is tableType<'k,'v> -> number =
        table.count,

    tableKeyValues table is tableType<'k,'v> -> list<{key is 'k, value is 'v}> =
        table.seq(),

}
