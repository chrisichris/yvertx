/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */


module server;


load yeb.std;
load yeb.async;
load yeb.mvc.mvc;
load yeb.yvertx;


router = routes [ 
    Get "/" ==>> do req res: 
        println "received request \(req)";
        res <== writeHtml "Hello World!" req;
    done,
    Get "/index" ==> writeHtml "Hello Index!"
];

verticle do:
    /*fibre2 = newFibre();
    _ = fibre2.register (println . ("fibre2/1:"^));
    fibre2.send("foo");
    _ = fibre2.register (println . ("fibre2/2:"^));
    fibre2.send("foo2");
    fibre = newFibre();
    parallel ([1..20] |> map' do n:
        newWorker do: 
            println "worker made \(n)";
            _ = fibre.register do m: println "worker\(n): \(m)"; done;
        done
    done) \(println "sending......";
            for [1..10] fibre.send);
    println "running servier";
    createRequestWorkers 2 \do q r: println q done do yebHandler:
        println "handler gotten \(yebHandler)";
    done;
        ;
    println "handler created";*/

    /*
    createRequestWorkers 1 \(do req res: println req done)
        \case of
        Some ha:
            server = createHttpServerWithHandler (httpToHandler [] ha);
            println "server started";
            server#listen(8080);
            ();
        None _ : ()
        esac;*/
    //    (httpToHandler [] yebHandler);
    
    //_ = deployVerticle "subserver.yeti" emptyJS 1 \();

    server = createYebHttpServer 0 [] 1 \router;
    
    println "server running";
    server#listen(8080);
    \();
done;
