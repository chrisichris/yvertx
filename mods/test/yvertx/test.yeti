module yvertx.test;

import org.vertx.java.deploy:Container;
import org.vertx.java.core.file:FileProps;

load yeb.std;
load yeb.async;

load yeb.yvertx;

load yeb.yvertx.testutils;

_ = load yvertx.deploy.child;


fileDir = "../../target/yeti-test-output";

fshelper = {
    clean dir after = 
        fileSystem.exists dir (maybe () do exi:
            if exi then
                fileSystem.delete dir true (maybe () \(
                    fileSystem.mkdir dir none true (maybe () 
                        (after is 'a -> ()))
                ))
            else
                fileSystem.mkdir dir none true (maybe () after)
            fi
        done);
    
};

httpMethod opts method variant rstu =
    (rstu.setTimeout 15000;
    var ssl = false;
    var chunked = false;
    for opts \case of
        SSL b: ssl := b;
        Chunked b: chunked := b;
        esac;

    path = "/someurl/blah.html";
    query = "param1=vparam1&param2=vparam2";
    
    uri = if ssl then "https" else "http" fi
              ^ "://localhost:8080" ^ path ^"?"^query;
    headers = ["header1":"vheader1",
               "header2":"vheader2"];
    rheaders = ["rheader1":"vrheader1",
               "rheader2":"vrheader"];
    
    server = createHttpServerWithHandler do req:
        rstu.assert "uri \(req#uri)" (uri == req#uri);
        rstu.assert "method" (method == req#method);
        rstu.assert "path" (path == req#path);
        rstu.assert "query" (query == req#query);

        rstu.assert "headers" 
            (fold (flip ((and) . (in (requestHeaders req))))
                true (keys headers));
        rstu.assert "params" (params req == ["param1":"vparam1",
                                             "param2":"vparam2"]);
                                            
        putResponseHeaders req rheaders; 
        
        body = newBuffer 0;

        dataHandler req do data:
            _ = body#appendBuffer(data);
        done;

        req#response#setChunked(chunked);

        endHandler req do:
            if not chunked then
                putResponseHeaders req 
                    ["Content-Length":string body#length()];
            fi;
            req#response#writeBuffer(body);
            if chunked then
                putResponseTrailers req ["trailer1" : "vtrailer1",
                                       "trailer2" : "vtrailer2"];
            fi;
            req#response#end();
        done;
    done;

    if ssl then
        server#setSSL(true)
            #setKeyStorePassword("wibble")
            #setKeyStorePath("keystores/server-keystore.jks")
            #setTrustStorePath("keystores/server-truststore.jks")
            #setTrustStorePassword("wibble")
            #setClientAuthRequired(true)
    fi;

    _ = server#listen(8080);

    //wait for server to be ready
    _ = setTimer 1000 do:

        sentBuff = newRandomBuffer(1000);
        
        
        client = createHttpClient "localhost:8080";

        request = httpRequest client (variant uri) headers
        do resp:

            rstu.assert "statusCode" (200 == resp#statusCode);
            rstu.assert "rHeaders: \(responseHeaders resp) | \(rheaders)" 
                    (fold (flip ((and) . (in (responseHeaders resp))))
                        true (keys rheaders) );
            body = newBuffer(0);
            dataHandler resp do data:
                _ = body#appendBuffer(data);
            done;

            endHandler resp do:
                rstu.assert "sentBuff" (sentBuff == body);
                if chunked then
                    rstu.assert "rTrailers" (responseTrailers resp ==
                                    ["trailer1":"vtrailer1",
                                    "trailer2":"vtrailer2"]);
                fi;
                closeHttpServer server do:
                    rstu.assure "" true;
                done;
            done;
        done;
        if ssl then
            client#setSSL(true)
                #setKeyStorePath("keystores/client-keystore.jks")
                #setKeyStorePassword("wibble")
                #setTrustStorePath("keystores/client-truststore.jks")
                #setTrustStorePassword("wibble");
        fi;

        _ = request#setChunked(chunked);
        if not chunked then
            putRequestHeaders request 
                ["Content-Length": string sentBuff#length()];
        fi;
        _ = request#writeBuffer(sentBuff);
        request#end();
    done);

websocketEcho binary rs =        
    (rs.setTimeout 1000;
  
    server = createHttpServer ();

    connectWebSocketServer server do ws:
        dataHandler ws do buff:
            _ = ws#writeBuffer(buff);
        done;
    done;
    server#listen(8080);

    
    _ = setTimer 1000 do:
        client = createHttpClient "localhost:8080";
        
        {buff,str} = if binary then
                {buff = newRandomBuffer 1000, str = ""};
            else
                str = randomString(1000);
                {buff = newStringBuffer str, str};
            fi;

        connectWebSocketClient client "/someurl" do ws:
            received = newBuffer 0;
            dataHandler ws do data:
                _ = received#appendBuffer(data);
                if received#length() == buff#length() then
                    rs.assert "be" (received == buff);
                    client#close();
                    closeHttpServer server do:
                        rs.assure "finished" true;
                    done;
                fi;
                if binary then
                    ws#writeBinaryFrame(buff);
                else
                    ws#writeTextFrame(str);
                fi
            done;
        done
    done);

verticle do :
        


    runTests [Exclude "websocket:"] [

"common load": do rs:
   // rs.assure "" ("foo" == load yvertx.common.module1);
   rs.assure "" true;
done,

"deploy" : do rs:
    registerBusHandler "test-handler"
        \(_ = deployVerticle 
                "yvertx.deploy.child.yeti" emptyJS 1 
                \())
        do {body,handler}:
        if body.started then
            rs.assure "in body" true;
            unregisterBusHandler "test-handler" handler \();
        else
        fi
        done;
done,

"undeploy" : do rs:
    _ = deployVerticle "yvertx.deploy.child.yeti" emptyJS 1
        do did:
            registerBusHandler "test-handler" \() do {body,handler}:
                if body.stopped then
                    rs.assure "body-stopped" true;
                    unregisterBusHandler "test-handler" handler \();
                fi
            done;
            undeployVerticle did \();
        done;
done,

"cb:return" : do rs:
   (return 2) do v: rs.assure "" ((Some 2) == v) done;
done,

"cb:bind" : do rs:
    r = do cb: cb (Some 1) done
    |> bind do x:
        rs.assert "" (x == 1);
        do cb2: cb2 (failNone "f") done
    done;
    r \case of
        None ex: rs.assure "" true;
        Some v: rs.assure "" false;
    esac;
done,


"cb:parallel" : do rs:
    //make services 
    adresses = [1..10] |> map (("adr"^) . string);
    for adresses do adr:
        registerBusHandler adr \() do {reply, handler}:
            reply {value = 1, 
                   for_json=E()};
            unregisterBusHandler adr handler \();
        done
    done;
    handlers = adresses |> map do adr:
        requestMessageFromBus adr emptyJS 
        |>bind do {body} : 
            return body.value 
        done;
    done;
    parallel handlers (maybe () do res:
        rs.assure "\(res)" (10 == fold (+) 0 res);
    done)
done,

"cb:colllectAsync" : do rs:
    register adr =
        registerBusHandler adr \() do {reply, handler} :
            reply {value = adr ^ "foo", for_json=E()};
            unregisterBusHandler adr handler \();
        done;
    
    for [1..2] (register . ("adr"^) . string);

    cfn = collectAsync do s:{
         a = setAsync s
            (requestFromBus "adr1" emptyJS |> bind (return . (.value))),
         b = setAsync s
            (requestFromBus "adr2" emptyJS |> bind (return . (.value))),
        }done;
        
    cfn (maybe () do r :
            rs.assure "\(r)" (r.a() == "adr1foo" 
                              and r.b() == "adr2foo");
        done);
done,




"eventbus:simple" : do rs:
    msg = {address = "foo-address", price=23.45, for_json=E()};
    rs.setTimeout(2000);
    address = "foo-some";
    var handled = false;
    registerBusHandler address \() do {body, handler}:
        unregisterBusHandler address handler \();
        rs.assure "\(body)" (body == msg and not handled);
        handled := true;
    done;
    sendToBus address msg;
done,

"eventbus:emptyMessage" : do rs:
    var handled = false;
    adr = "foo";
    msg = emptyJS;
    registerBusHandler adr \() do {body,handler}:
        unregisterBusHandler adr handler \();
        rs.assure "\(body)" (body == msg and not handled);
        handled := true;
    done;
    sendToBus adr msg;
done,

"eventbus:unregister" : do rs:
    var handled = false;
    msg = {count = 1, foo = "foo", for_json=E()};
    var assertion = true;
    registerBusHandler "foo" \() do {body,handler}:
        assertion := assertion and (body == msg and not handled);
        unregisterBusHandler "foo" handler \();
        //should do nothing
        unregisterBusHandler "foo" handler \();
        handled := true;
        _ = setTimer 100 do:
            //complete the test
            rs.assure "" assertion;
        done;
    done;
    for [1..3] \(sendToBus "foo" msg);
done,

"eventbus:withReply" : do rs:
    var handled = false;
    msg = {count=1, foo = "foo2", for_json=E()};
    repl = {reply = true, for_json=E()};
    var asserts = true;
    registerBusHandler "foo" \() do {body,handler, reply}:
        asserts := asserts and (not handled and msg == body);
        unregisterBusHandler "foo" handler \();
        handled := true;
        reply repl;
    done;

    requestMessageFromBus "foo" msg (maybe ()do {body}:
        rs.assure "\(body)" (asserts and (body == repl));
    done);
done,

"eventbus:replyOfReplyOfReply" : do rs:
    _ = rs.assert is string -> boolean -> ();
    adr = "foo";
    msg = {msg = "message", for_json=E()};
    repl = {msg = "repl", for_json=E()};
    repl2 = {msg = "repl2", for_json=E()};
    repl3 = {msg = "repl3", for_json=E()};
    registerBusHandler adr \() do {body, handler, request}:
        rs.assert "" (msg == body);
        request repl (maybe () do {body, reply}:
            rs.assert "" (repl2 == body);
            reply repl3;
            unregisterBusHandler adr handler \();
        done)
    done;

    requestMessageFromBus adr msg (maybe () do {body,request}:
        rs.assert "" (body == repl);
        request repl2 (maybe ()do {body}:
            rs.assure "" (body == repl3);
        done)
    done);
done,

"eventbus:emptyReply" : do rs:
    _ = rs.assert is string -> boolean -> ();
    var handled = false;
    adr = "foo";
    msg = emptyJS;
    registerBusHandler adr \() do {reply, body, handler}:
        rs.assert "" (not handled);
        rs.assert "" (msg == body);
        unregisterBusHandler adr handler \();
        handled := true;
        reply emptyJS;
    done;
    requestMessageFromBus adr msg (maybe ()do {body, reply}:
        rs.assure "" true;
    done);
done,

"filesystem:copy" : do rs:
    dir = fileDir^"/copy";
    fshelper.clean dir \(;
    from = dir ^"/foo.tmp";
    to = dir ^"/bar.tmp";
    content = "some-data";
    fileSystem.writeFile from (newStringBuffer content) (maybe ()do:
        fileSystem.copy from to true (maybe ()do:
            fileSystem.readFile to (maybe ()do res:
                rs.assure "" ((string res) == content)
            done);
        done)
    done));
done,

"filesystem:move" : do rs:
    fshelper.clean fileDir \(;
    from = fileDir ^"/foo.tmp";
    to = fileDir ^"/bar.tmp";
    content = "some-data";
    fileSystem.writeFile from (newStringBuffer content) (maybe ()do:
        fileSystem.move from to (maybe ()do:
            fileSystem.readFile to (maybe ()do res:
                rs.assure "" ((string res) == content)
            done)
        done)
    done))
done,    

"filesystem:readDir" : do rs:
    dir = fileDir ^ "/readdir";
    fshelper.clean dir \(
        file1 = dir ^"/foo.tmp";
        file2 = dir ^"/bar.tmp";
        file3 = dir ^"/baz.tmp";
        content = newStringBuffer "some-data";
        fileSystem.writeFile file1 content (maybe ()do:
            fileSystem.writeFile file2 content (maybe ()do:
                fileSystem.writeFile file3 content (maybe ()do:
                    fileSystem.readDir dir none (maybe ()do res:
                        rs.assert "\(res)" (length res == 3);
                    done)
                done)
            done)
        done)
    );
done,

"filesystem:props" : do rs:
    dir = fileDir ^ "/props";
    fshelper.clean dir \(
        content = newStringBuffer "some-data";
        file = dir ^"/foo.tmp";
        fileSystem.writeFile file content (maybe ()do:
            fileSystem.props file (maybe ()do res:
                rs.assert "" (res is ~FileProps)#isRegularFile;
                rs.assert "" (res#creationTime#getTime() > 0);
                rs.assert "" (res#lastAccessTime#getTime() > 0);
                rs.assure "" (res#lastModifiedTime#getTime() > 0);
            done)
        done)
    );
done,

"filesystem:pumpFile" : do tests:
    import org.vertx.java.core.file:AsyncFile;
    dir = fileDir^"/pumpfile";
    fshelper.clean dir \(
        from = dir^"/foo.tmp";
        to = dir^"/bar.tmp";
        content = newRandomBuffer(10000);
        fileSystem.writeFile from content (maybe ()do:
            fileSystem.open [] from (maybe ()do file1:
                fileSystem.open [] to (maybe ()do file2:
                    rs = (file1 is ~AsyncFile)#getReadStream();
                    ws = (file2 is ~AsyncFile)#getWriteStream();
                    pump = createPump rs ws;
                    pump#start();
                    rs#endHandler(toHandler do:
                        file1#close(toAsyncResultHandler (maybe ()do:
                            file2#close(toAsyncResultHandler (maybe ()do:
                                fileSystem.readFile to (maybe ()do res:
                                    tests.assert "" (content == res);
                                done);
                            done));
                        done));
                    done);
                done);
            done);
        done);
    )
done,

"http:hostport" : do rs:
    {host,port} = hostAndPort "localhost:8080";
    rs.assure "" (host == "localhost" and port == 8080);
done,

"http:clientserver" : do rs:
    import java.lang:Thread;
    rs.setTimeout(15000);
    server = (createHttpServerWithHandler do req:
        (putResponseHeaders req 
            ["Content-Type": "text/html; charset=UTF-8"]);
        req#response#end(
            "<html><body><h1>Hello from vert.x!</h1></body></html>");
    done);
    server#listen(8080);

    _ = setTimer 1000 do:
        client = createHttpClient "localhost:8080";
        getHttpBodyNow
            client
            "/" 
            [:] 
            (maybe ()do {resp, buffer}:
                closeHttpServer server do:
                    rs.assure (string buffer) true;
                done;
            done);
    done;
done,
    

"http:get" : httpMethod [] "GET" Get,

"http:put" : httpMethod [] "PUT" Put,

"http:post" : httpMethod [] "POST" Post,

//"http:head" : httpMethod [] "HEAD" Head,

"http:options" : httpMethod [] "OPTIONS" Options,

"http:trace" : httpMethod [] "TRACE" Trace,

"http:path" : httpMethod [] "PATCH" Patch,

"net:test1" : do rs:
    server = createAndConnectNetServer do sock:
        dataHandler sock do buffer:
            _ = sock#write(buffer);
        done;
    done;

    server#listen(1234,"localhost");

    serverCloseFn _ = closeNetServer server \(rs.assure "closed" true);

    client = createNetClient ();

    connectNetClient client "localhost:1234" serverCloseFn
        do sock:
            dataHandler sock do buffer:
                closeNetClient client;
                serverCloseFn();
            done;
            _ = sock#write(newStringBuffer "this is a buffer");
        done;
done,

"parsetools:delimited" : do rs:
    var lineCount = 0;
    
    parser = delimitedRecordParser "\n" do buffer:
        lineCount := lineCount + 1;
        if lineCount == 3 then
            rs.assure "" true;
        fi
    done;

    parser (newStringBuffer "asfdasfsafafafa\nauio\nasdfa\n");
done,

"parsetools:fixed" : do rs:
    var chunkCount = 0;
    chunkSize = 100;
    numChunks = 3;

    parser = fixedRecordParser chunkSize do buffer:
        rs.assert "" (chunkSize == buffer#length());
        chunkCount = chunkCount + 1;
        if chunkCount == numChunks then
            rs.assure "" true;
        fi;
    done;

    input = newBuffer 0;
    for [1..numChunks] do:
        _ = input#appendBuffer(newRandomBuffer chunkSize);
    done;
    parser input;
done,

"timer:oneOff" : do rs:
    rs.setTimeout 5000;

    var count = 0;
    _ = setTimer 1000 do tid:
        rs.assert "count" (count == 0);
        count := count + 1;
        _ = setTimer 10 do:
            rs.assure "" true
        done;
    done;
done,

"timer:periodic" : do rs:
    rs.setTimeout 5000;
    numFires = 20;
    delay = 100;
    var count = 0;
    _ = setPeriodic delay do timerId:
        count := count + 1;
        if count == numFires then
            _ = cancelTimer timerId;
            _ = setTimer 10 do:
                rs.assure "" true;
            done;
        fi;
        if count > numFires then
            rs.assert "Fired too many times" false;
        fi
    done;
done,

"websocket:echoBinary" : websocketEcho true,

"websocket:echoString" : websocketEcho false,

"websocket:writeFromConnectionHandler" : do rs:
    rs.setTimeout 5000;
    server = createHttpServer ();
    connectWebSocketServer server do ws:
        _ = ws#writeTextFrame("foo");
    done;
    server#listen(8080);

    _ = setTimer 1000 do:
        client = createHttpClient "localhost:8080";
        connectWebSocketClient client "/someurl" do ws:
            dataHandler ws do buff:
                rs.assert "" ("foo" == string buff);
                client#close();
                closeHttpServer server do:
                    rs.assure "close" true;
                done;
            done
        done;
    done;
done,

"websocket:close" : do rs:
    rs.setTimeout 5000;
    server = createHttpServer ();
    connectWebSocketServer server do ws:
        dataHandler ws do:
            ws#close();
        done;
    done;
    server#listen(8080);

    _ = setTimer 1000 do:
        client = createHttpClient "localhost:8080";
        connectWebSocketClient client "/someurl" do ws:
            closedWebSocket ws do:
                client#close();
                closeHttpServer server do:
                    rs.assure "close" true;
                done;
                ws#writeTextFrame("foo");
            done;
        done;
    done
done,

"websocket:closeFromConnectionHandler" : do rs:
    rs.setTimeout 5000;
    server = createHttpServer ();
    connectWebSocketServer server do ws :
        ws#close();
    done;
    server#listen(8080);

    _ = setTimer 1000 do:
        client = createHttpClient "localhost:8080";
        connectWebSocketClient client "/someurl" do ws:
            closedWebSocket ws do:
                client#close();
                closeHttpServer server do:
                    rs.assure "close" true;
                done;
            done;
        done;
    done
done,

];
    \()
done;

